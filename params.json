{
  "name": "Studynotes",
  "tagline": "some free time notes",
  "body": "\r\n* emacs大法好\r\n** 一年之内，学成emacs这套刀法。\r\n*** 2016-06-06\r\n*****  查看网络掉包状况，ping google.com, 然后ctrl+c终止，看最后面几行。\r\n+ 比如: --- google.com ping statistics --- 5 packets transmitted, 0 received, 100% packet loss, time 3999ms, 这是严重丢包了。\r\n+ 在比如: sudo fping hao123.com, ...... --- hao123.com ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4005ms, 这个网络还可以。\r\n+ 没有止步的空间，不忘初心。\r\n*** 2016-06-03\r\n+ another way of swap Ctrl and Caps Lock is [[https://www.emacswiki.org/emacs/MovingTheCtrlKey|xmodmap]] \r\n+ vim ~/.xmodmap\r\n  remove Lock = Caps_Lock\r\n  remove Control = Control_L\r\n  keysym Control_L = Caps_Lock\r\n  keysym Caps_Lock = Control_L\r\n  add Lock = Caps_Lock\r\n  add Control = Control_L\r\n+ nohup xmodmap ~/.xmodmap  &\r\n+ phper solve problem level, [[http://rango.swoole.com/archives/340][here]] is a referance.\r\n+ lv0 \r\n  - open php.ini error_reporting level to E_ALL\r\n  - if the logs had wroted to files. just check the logs files by linux command 'tailf dirname/logfilename'\r\n+ lv1 \r\n  - which php\r\n  - in cli way, php -i | grep php.ini\r\n  - in fpm way, request a file with phpinfo()\r\n+ lv2\r\n  - debug\r\n  - trade class\r\n  - var_dump/die\r\n+ lv3 \r\n  - strace command, like strace php index.php, or strace -p PID, \r\n+ lv4\r\n  - [[http://www.rationallyparanoid.com/articles/tcpdump.html][tcpdump]] examples, need to konw what's TCP SYN3, when to send FIN package, and when to send RST package\r\n+ lv5 \r\n  - xhporf\r\n  - xdebug\r\n  - curl\r\n  - record the microtime between the begin to end it requests. fails or success percentages.\r\n+ lv6\r\n  - strace can't strace why CPU take 100%, but gdb do.\r\n  - coordinate php-src(.gdbinit zbacktrace), find the dead loop\r\n+ lv7\r\n  - see the kernel sources of php, try to fixed some extensions bug of php. know opcode and execude_data and so on.\r\n\r\n*** 2016-06-01 \r\n+ swap the Ctrl and Caps Lock for ubuntu14.04 or later version by the method below:\r\n+ sudo apt-get install gnome-tweak-tool\r\n+ then run the command by gnome-tweak-tool\r\n+ select the ctrl Typing -> Ctrl key position -> Swap ctrl and caps lock\r\ndone\r\n*** 2016-05-30 \r\n| time      | thing        | goal                    |\r\n|-----------+--------------+-------------------------|\r\n| 30mins    | thinking     | inner peace             |\r\n| 1 hours   | do exercise  | keep heathy             |\r\n| 6.5 hours | sleeping     | body circle             |\r\n| 2 hours   | study myself | lisp, emacs and english |\r\n| 8 hours   | jobs         | focus on working        |\r\n\r\n+ 日进一寸\r\n+ 也可以有所成\r\n  1) 每天需要坚持学习1-2个小时。\r\n  2) 坚持使用google搜索资料。\r\n  3) 坚持每天学习英语。用两年时间将英语听力和阅读水平提高到一个新的高度。\r\n  4) 从vim转到emacs。除了远程访问服务器之外，其他业务投入emacs环境。\r\n     \r\n+ C-c C-l 可快速生成org的link\r\n+ spacemacs so nice!\r\n\r\n*** 2016-05-28\r\n----------------------------------------------------------------------\r\nemacs org-mode is so power!\r\n\r\n*** 2016-05-27\r\n----------------------------------------------------------------------\r\n+ QPS每秒查询率(Query Per Second)\r\n  - 每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。\r\n  - 术语说明：\r\n    QPS = req/sec = 请求数/秒\r\n  -【QPS计算PV和机器的方式】\r\n  QPS统计方式 [一般使用 http_load 进行统计]\r\n  - QPS = 总请求数 / ( 进程总数 * 请求时间 )\r\n    QPS: 单个进程每秒请求服务器的成功次数\r\n    单台服务器每天PV计算\r\n  - 公式1：每天总PV = QPS * 3600 * 6\r\n  - 公式2：每天总PV = QPS * 3600 * 8\r\n  +  服务器计算\r\n    - 服务器数量 = ceil( 每天总PV / 单台服务器每天总PV )\r\n      -【峰值QPS和机器计算公式】\r\n      - 原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间\r\n公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)\r\n- 机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器\r\n- 问：每天300w PV 的在单台机器上，这台机器需要多少QPS？\r\n  答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)\r\n\r\n- 问：如果一台机器的QPS是58，需要几台机器来支持？\r\n  答：139 / 58 = 3\r\n\r\n*** 2016-05-26\r\n----------------------------------------------------------------------\r\n测试 git remote \r\n*** 2016-05-25\r\n----------------------------------------------------------------------\r\n[[http://www.cnblogs.com/zhuweisky/p/5003771.html][道器合一]]\r\n\r\n*** 2016-05-24\r\n----------------------------------------------------------------------\r\n+ telnet部分快捷键\r\n  - ctrl+]退出当前\r\n  - close 关闭telnet\r\n  - ？帮助\r\n  - quit直接退出\r\n  - netcat -u \r\n\r\n*** 2016-05-23\r\n----------------------------------------------------------------------\r\nemacs中使用alt+w 复制一行\r\n刚开始，有点不习惯，总是习惯性的打完一点内容按下ctrl+[，一直以为用的是vim。真是funny, 但是啊，ctrl+[居然和vim一样都是esc的快捷键～～,\r\nctrl + w 是删除当前行。我觉得，只要是我自己想学的，怎么都喜欢花时间在上面。多少都好。感兴趣了。进步才比较明显。\r\n用点心。\r\n\r\n*** 2016-05-21\r\n----------------------------------------------------------------------\r\n\r\n又重装了系统。晕屎。\r\nss-qt5图形化界面下运行不起来了。[[https://github.com/shadowsocks/shadowsocks-qt5/issues/312][ss-qt5翻墙]]\r\n看github里面的issues， 不少人安装了ubuntu16.04LTS, 而且都是些喜欢翻墙的人。\r\n只能启动命令行了。\r\n\r\n安装：\r\n+ sudo apt-get install python-pip\r\n+ sudo pip install shadowsocks\r\n+ sudo apt install shadowsocksm\r\n\r\n+ man sslocal 查看 sslocal用法\r\n\r\n+ touch ~/config.json \r\n+ vim ~/config.json\r\n  {\r\n  \"server\":\"xxxxxx.xxxx.net\",\r\n  \"server_port\":10000,\r\n  \"local_port\":1080,\r\n  \"password\":\"11111111\",\r\n  \"method\": \"aes-256-cfb\",\r\n  \"timeout\":600\r\n  }\r\n\r\n + backend work\r\n  - nohup sslocal -c ~/config.json  &  \r\n\r\n*** 2016-05-20\r\n----------------------------------------------------------------------\r\n(1) 格式输出日期， date +\"%Y-%m-%d %T\"\r\n(2) vim ex模式下可以ctrl+d调出所有的ex命令, 比如安装了ctrp插件的话， 可以通过 :ctrlp filename 查找文件\r\n\r\n*** 2016-05-17\r\n----------------------------------------------------------------------\r\n+ du dirname\r\n+ du sm * -h\r\n+ du sm log -h | sort -n \r\n+ du sm log -h | sort -n | less\r\n+ du sm log -h | sort -M | less | grep G          ; sort by month and page up/down and find result by size G\r\n+ du sm log -h | sort -n | less | grep 2016-05-17 ; filter by date\r\n+ du sm logs -h --time | sort -n | less | grep G \r\n+ du -sh dirname/* | sort -rn | grep G| tail \r\n+ du -sh dirname/* | sort -rn | grep 2015-05-17| tail \r\n\r\n*** 2016-05-14\r\n----------------------------------------------------------------------\r\nphalcon2.1.x已经开始支持php7了，　哈哈哈！已经正确运行demo, 项目里面还不能马上用上。\r\n关键是安装zephir的步骤一直没装上。找了不少资料。\r\n先在自己的笔记本上搞搞。\r\n[[https://gist.github.com/Tosyn/fef6437dd3906ff200e471e478eaae95][参考看这里]]\r\n\r\n*** 2016-05-07\r\n----------------------------------------------------------------------\r\n安装kali　linux时需要分配大点空间，开始时给４G, 不够，死活安装没成功。后来直接给50G，终于可以了。好了，现在可以开始玩下这个渗透系统了\r\n\r\n*** 2016-05-06\r\n----------------------------------------------------------------------\r\n源代码!直接看源代码, 这才是最好境界!最关键的开关。\r\n\r\n*** 2016-04-30\r\n----------------------------------------------------------------------\r\n提高业务能力的同时，坚持学习python。后者反过来会促进业务能力的增强。\r\n\r\n*** 2016-04-29\r\n----------------------------------------------------------------------\r\n+ To follow the path: 沿着这样一条道路：\r\n+ look to the master, 关注大师，\r\n+ follow the master, 跟随大师，\r\n+ walk with the master, 与大师同行，\r\n+ see through the master, 洞察大师，\r\n+ become the master. 成为大师。\r\n\r\n*** 2016-04-24\r\nsed命令相当的牛逼，　一定要学会，　sed -i 直接可以编辑文件，当一个文件很大时，用sed比vim要更方便\r\n----------------------------------------------------------------------\r\n+ nl \r\n+ sed\r\n+ awk\r\n三个命令行非常有用\r\n\r\n*** 2016-04-23\r\n----------------------------------------------------------------------\r\n+ 升级到ubuntu16.04之后，发现php也更新了。但是mysql没更新。重新布置下环境：　\r\n  1) sudo apt-get install php7.0-fpm php7.0-mysql\r\n  2) sudo vim /etc/nginx/sites-available/default 添加index.php\r\n  3) 将这行注释去掉，fastcgi_pass unix:/run/php/php7.0-fpm.sock;\r\n  4) include snippets/fastcgi-php.conf;这样放出来\r\n  5) sudo nano /etc/php/7.0/fpm/php.ini , 将cgi.fix_pathinfo=0\r\n  6) sudo service php7.0-fpm reload 成功了\r\n  7) laravel 的spark需要在php7.0的基础上安装mbstring扩展\r\n  8) sudo apt install php7.0-mbstring\r\n\r\n*** 2016-04-11\r\n----------------------------------------------------------------------\r\n+ ubuntu下使用c-space启动emacs内的中文输入法，　lc_ctype=zh_cn.utf-8 emacs \r\n+ gtd getting thing done, 翻译：把事情做完。\r\n  - 本质是放空人的大脑。然后一步步按照设定的路线去努力执行。\r\n  - 五个核心原则是：收集、整理、组织、回顾、执行。\r\n+ laravel 5 查询最后一条查询sql \r\n  - 需要开启querylog \r\n  - db::connection()->enablequerylog();\r\n  - dd(db::getgetquerylog());\r\n\r\n*** 2016-04-09\r\n----------------------------------------------------------------------\r\n+ ubuntu14.04 默认的nodejs太老了，　\r\n  - sudo add-apt-repository ppa:chris-lea/node.js\r\n  - sudo apt-get update\r\n  - sudo apt-get install nodejs\r\n\r\n*** 2016-04-06\r\n+ mysql去除重复的数值\r\n  - select  b.id, b.status, b.name,  case  when f.id is null then 0 else 1 end is_tag\r\n    from b_table as b \r\n    left join d_table as d on b.id=d.id \r\n    left  join (select distinct id from f_table) as f on b.id=f.id\r\n    where b.status=3;\r\n*** 2016-04-03\r\n----------------------------------------------------------------------\r\n今天是清明节\r\n看了下数据库的帮助命令，　大有搞头啊！　help command 可以看见少数操作命令，　help contents相当于进入了一个mysql的结构的总目录。对于mysql还是有很多东西不知道的呀，嘿嘿嘿~\r\n*** 2016-04-01\r\n----------------------------------------------------------------------\r\n愚人节～～，　学习新的东西的时候，自己才会全身心的投入进去。\r\n*** 2016-03-31\r\n----------------------------------------------------------------------\r\nmysql 查询字段长度：　select length(column_name) from table_name;\r\n\r\n*** 2016-03-31\r\n----------------------------------------------------------------------\r\nmysql查看保存的字段长度: select  length(str) from test_table;\r\n\r\n*** 2016-03-25\r\n----------------------------------------------------------------------\r\n+ dpkg -l | grep jdk \r\n+ dpkg -l 查看linux下安装文件路径\r\n*** 2016-03-25\r\n----------------------------------------------------------------------\r\n请解释下strtotime(),time(),microtime(),date()的区别。。。。。。\r\n\r\n*** 2016-03-24\r\n----------------------------------------------------------------------\r\n远程版本库采用merge request比本地merge master更高效\r\n\r\n*** 2016-03-23\r\n----------------------------------------------------------------------\r\n+ 今天学了两个牛逼的命令：\r\n  - 一个是vim 中的多文件替换 \r\n    1):args dirname/**/*.php \r\n    2):argdo %s/test1/test2/ge | update\r\n  - 二是：linux终端 grep -rl need_replace_word dirname | xargs sed -i 's/test1/test2/g'\r\n\r\n+ 查看内存\r\n  cat /proc/meminfo\r\n\r\n*** 2016-03-16\r\n----------------------------------------------------------------------\r\n通过 curl　方式发post请求，如果url域名经过 30x　跳转后，$_post不会被保持的！可以通过ip方式避免跳转的问题 \r\n301的调整是不被保持的\r\n\r\n*** 2016-03-15\r\n----------------------------------------------------------------------\r\n回顾一下本次alphago与小石头的人机对局，感觉很奇妙啊。alphago确实有进入世界前三的水准。对处于下坡路的小李来说，相对吃力。这个时代，正是缺少神之一手的棋手的时代。然而alphago还不是完全体，人类已经意识到围棋还存在的广阔的提升空间，或许等begago出来的时候，或许人类将迎来围棋的巅峰时代!而我们将见证到这个围棋时代的到来。\r\n\r\n*** 2016-03-13\r\n----------------------------------------------------------------------\r\n第７８手的挖，　实在是\"神之一手\"啊。这一刻，　简直是吴清源附体，　佐为附体啊！这才是小李啊！哈哈，那个犀利的小石头还在。这才是围棋的魅力所在啊！逼得alphago都出bug了！\r\n\r\n*** 2016-03-12\r\n----------------------------------------------------------------------\r\nalphago 太牛逼了。完全颠覆了我心目中机器对围棋的理解。见证了这个奇特的围棋历史奇点。\r\n\r\n*** 2016-03-11\r\n\r\n永远不要轻视那些看起来能力不如自己的人.\r\n今天被一个初中生给我上了一课：我不够自律。自己的自控能力不够。\r\n如果我连自己的没法控制，那真的是一无是处。\r\n\r\n*** 2016-03-10\r\n----------------------------------------------------------------------\r\n这给了我一个很大的启发：\r\n(1) 如果要赌，你就赌人少赌的那个。人类的本性是和自然规律相反的。\r\n(2) 太震惊了，　alphago第二局居然也赢了。\r\n(3) 要集中力量。\r\n(4) 向大师学习。\r\n\r\n*** 2016-03-09\r\n----------------------------------------------------------------------\r\n今天李世石败给ai了。历史的一个重要时刻啊。计算机离人的思考思维还有多远距离？\r\n\r\n*** 2016-03-09\r\n----------------------------------------------------------------------\r\n今天李世石要于ai比赛了。历史的一个重要时刻啊。计算机离人的思考思维还有多远距离？\r\n\r\ngulp 依赖比较新的npm, npm需升级到5.7.1. \r\n\r\n*** 2016-03-09\r\n----------------------------------------------------------------------\r\ndf 查看硬盘使用情况, du -sm * -h 查看磁盘空间   -h human\r\n\r\n*** 2016-03-07\r\n----------------------------------------------------------------------\r\n既然是数据, 在计算机网络结构层划分中一定有对应的有载体和关联, 需要重新梳理下这其中的关系.\r\n\r\n*** 2016-03-05\r\n----------------------------------------------------------------------\r\n时间，精力，钱被撕的四分五裂，这样下去什么事情也弄不成。\r\n\r\n*** 2016-03-03\r\n----------------------------------------------------------------------\r\n将早上的一点时间抽出来。积累起来做点事情。还有坐车的时间。\r\n所有的事物都可以看成是数据。他们都有最小的单元结构，不同的次序组成了他们的运行的流程。要知道他们之间的关系，必须熟悉他们的结构和组织形式，以及他们运行的次序。\r\n\r\n*** 2016-03-03\r\n----------------------------------------------------------------------\r\n我的时间都用在哪里了？\r\n今天安装nvm, 用于node.js版本管理。\r\n(1) git 下载creationix下的nvm到本地，\r\n(2) 进入目录，执行./install.sh\r\n(3) 启用source ./nvm.sh\r\n(4) 将变量写到.zshrc里面去，　开机启动\r\n(5) nvm -v\r\n(6) nvm help 开始玩吧\r\n用简单的思维来总结网络的事物，　我的理解是：数据, 结构, 次序的集合。\r\n\r\n*** 2016-03-01\r\n----------------------------------------------------------------------\r\nlaravel 的eloquent非常强大，　比phalcon强大太多了。\r\n夜深人静，　折开笔记本，启动ubuntu, 戴上耳机， 翻开今天下载的一首音乐。一个悠扬的声音划破天际，直抵心房，仿佛穿行在一条苍茫峡谷。　　\r\n什么时候能弄一套合心意的音响？\r\n\r\n*** 2016-02-29\r\n----------------------------------------------------------------------\r\n即使对某一件兵器特别偏爱， 也不要拘泥于兵器。有比兵器更强大的力量。\r\n\r\n*** 2016-02-27\r\n----------------------------------------------------------------------\r\n导出查询结果到一个文件里面。\r\nmysql -uname -h hostname -p psw -e\"use dbname; select * from table\" > /temp/test.xls\r\n\r\n还是一句话：天下武功， 唯快不破.\r\n\r\n+ php artisan make:middleware oldmiddleware  \r\n+ php artisan make:middleware beforemiddleware 前置操作的中间件\r\n+ php artisan make:middleware aftermiddleware 后置操作的中间件\r\n\r\nvagrant up启动时， 启动virtualbox时报个错。\r\n\"virtualbox failed to open a session for the virtual machine  \"\r\n\r\n*** 2016-02-26\r\n----------------------------------------------------------------------\r\n+ shadowsocks-go翻墙\r\n  1) sudo apt-get install golang\r\n  2) git clone https://github.com/shadowsocks/shadowsocks-go\r\n  3) echo $golang 查看go路径, 比如是~/gocode什么的, 然后进去, 一直到src下面, 新建文件夹golnag.org/x, 下载加密crypto,命令为git clone https://github.com/golang/crypto\r\n  4) 现在可以安装go-server了\r\n    - go get github.com/shadowsocks/shadowsocks-go/cmd/shadowsocks-server 再就是客户端\r\n    - go get github.com/shadowsocks/shadowsocks-go/cmd/shadowsocks-local 这就安装大工告成了！\r\n  5) 放心， 你怎么输入google都不会有反应的。不用着急， 还没完, 启动啊，\r\n  可以放到后台去， 免得占用我的终端\r\n    - cd ~/go路径/bin, 执行\r\n    - nohup .shadowsocks-server  &\r\n    - nohup .shadowsocks-local  &\r\n  现在， 到墙外去耍去吧！前提是你的chome安装了switchysharp.1.10.5.crx或者别的代理\r\n  这能帮到这里了～\r\n+ laravel 这个最好还是设置下快捷方式\r\n - 将alias laravel='~/.composer/vendor/bin/laravel'  放置到~/.zshrc最后， \r\n - 重新执行下这个文件source ~/.zshrc, 这里的zshrc是和bash一样的工具, 就是更强大一下， 至于强大在哪些地方， 我也不知道。\r\n+ 没有沉淀的输出如果传播出去， 很快就会消散, 消亡。\r\n  怎么把项目弄到博客网站上去？这是个问题。 现在只是一个一个文件的放上去， 很不好。\r\n+ php artisan migrate 时发现自己的文件名改过了。可以 composer dump-autoload一下, 再重新执行即可。laravel貌似比phalcon好用的多。\r\n+ 今天被onclick坑死了！ <a onclick=\"method_dosth()\"></a> onclick这个写法， 不知道是怎么回事， 到app的话调用了什么都是没有回调的～～， 必须携程onclick， 谁能解释一下？\r\nlaravel 上手很快。下周可以用laravel来做博客的开发框架。\r\n\r\n*** 2016-02-25\r\n----------------------------------------------------------------------\r\n修改git默认的nano编辑器为vim的方法， 设置一下 git config –global core.editor vim\r\n\r\n*** 2016-02-24\r\n----------------------------------------------------------------------\r\n从一个不熟悉的环境转回来, 感觉vim是如此的顺心如意! 这兵器果然越用约有意思.\r\n利用周末的时间，下周一之前， 将一个简单的图书馆管理系统开发出来。使用laravel框架, 优先做图书增删改查， 以及借阅的功能。\r\n晋级那种事放到后面再说。技术上来之后， 晋级不晋级， 无所谓。\r\n那么， 让我们开始吧。哟西～ \r\n\r\n*** 2016-02-23\r\n----------------------------------------------------------------------\r\n9秒开机了！so sexy!ssd 大发好！x\r\n*** 2016-02-22\r\n----------------------------------------------------------------------\r\n两种兵器对比着学。\r\n固态硬盘的速度比机械硬盘存在一个质的差别。\r\n\r\n*** 2016-02-19\r\n----------------------------------------------------------------------\r\n+ \"建设性的懒惰才是真正的程序员应该有的特质。\"\r\n+ \"虽然编程基本上仍是一种个人封闭的活动，真正高超的程序来自于借助整个社区的注意力和脑力。一哥在封闭的项目中只使用自己脑力的开发者， 将会输给一个知道创造一个开放、进化式的环境--从中吸收成千上万人的探索设计空间的反馈、编码贡献、臭虫检测和其他的改进--开开发者。\"\r\n\r\n+ \"目标只有通过许多共同意志的竭诚努力才能实现.\"\r\n+ \"不管怎样， 在一个便宜电脑和快速互联网连接的世界里， 我们很一致的发现真正唯一的稀缺资源是有技术的努力。开源项目本质上从不会为了争夺机器或者网络或办公空间而成立；他们只在开发者自己失掉兴趣的时候消亡。\"\r\n+ \"开源的成功带来的一个最重要的影响会是教育我们：乐趣是创造性工作中最有效的经济模式。\"\r\n\r\n*** 2016-02-09\r\n----------------------------------------------------------------------\r\n年味一年比一年淡了。\r\n\r\n*** 2016-02-06\r\n----------------------------------------------------------------------\r\n回家的路\r\n\r\n*** 2016-02-04\r\n----------------------------------------------------------------------\r\nemacs 是个什么东西？\r\n用emacs -nw -q 不安装任何插件启动emacs\r\n\r\n*** 2016-02-18\r\n----------------------------------------------------------------------\r\n进入帮助文档内部\r\n+ c-h i\r\n+ c-h t\r\n+ c-h w\r\n+ m-x tetris 玩俄罗斯方块\r\n+ emacs -nw --color=no  不需要颜色\r\n+ emacs --daemon 作为守护进程运行\r\n+ emacsclient -t 桌面环境下打开命令行版的emacs\r\n\r\n*** 2016-02-17\r\n----------------------------------------------------------------------\r\nwhat a beauty day today ! emacs is coming! come on!\r\n+ m-d equal kill a word\r\n+ m-delete means backward-kill-world\r\n+ m-k kill-sentence\r\n+ c-k kill-line\r\n+ reset c-x u, c-/, c-_\r\n+ c-y means paste, but  c-y then m-y means next paste, like next register in vim, just like a circle\r\n+ c-u means n times to do \r\n  examples like : c-u 6 c-k means delete three lines, not 6 lines!\r\n+ c-g(esc esc esc) keyboard-quit\r\n+ backspace        backward-delete-char\r\n+ c-d              delete-char\r\n+ c-x c-s              save\r\n+ move : \r\n+ c-f next-char\r\n+ c-b prew-char\r\n+ c-p prew-line\r\n+ c-n next-line\r\n+ c-e end-of-line\r\n+ c-a ahead-of-line\r\n+ c-l  like h m l in vim(re center)\r\n+ m-f forward-word\r\n+ m-b backward-word\r\n+ m-a backward-sentence\r\n+ m-e forward-sentence\r\n+ c-v  scroll-up\r\n+ m-v  scroll-down\r\n search:\r\n+ c-s isearch forward\r\n+ c-r isearch backward\r\n+ esc c-s  isearch-forward-regexp\r\n+ esc c-r  isearch-backward-regexp\r\n+ m-%      waken replacement\r\n+ c-x c-f  find a file \r\n+ c-x o  change window\r\n+ c-x 1  only one window, like :only in vim\r\n+ c-x c-b list all the buffer files\r\n+ c-x b \r\n+ c-x k kill-buffer\r\n+ m-x describe-variable -> \"enter\" -> auto-mode-alist see all the mode , so sexy!\r\n+ m-x compile  woken the compile in linux\r\n+ c-\\切换输入法\r\n+ c-x shell 进入shell模式, 然后c-x c-b 返回buffer\r\n\r\n*** 2016-02-16\r\n----------------------------------------------------------------------\r\nstart to use emacs to do something\r\n\r\n*** 2016-02-03\r\n----------------------------------------------------------------------\r\n开始学习emacs\r\n网站搭建起来之后，要逐步建立起自己的博客系统。\r\n持续更新较高质量的博客内容。\r\n你问我800多块钱的书， 我会不会看？那我买来是干什么的？\r\n\r\n*** 2016-01-24\r\n----------------------------------------------------------------------\r\n做人确实比学代码难\r\n用一个简单的文本文件把每次出错的信息记录下来，后面如果解决了就把解决方法也记录一下，养成这种学习习惯，会受益匪浅, 写博客是最好的办法。\r\n\r\n*** 2016-01-23\r\n------------------------------------------------------------------------\r\n一龙哥身上有很多东西可以学习。查找一个问题，居然可以发现其背后那么多关联的东西。受教了。\r\n\r\n*** 2016-01-22\r\n------------------------------------------------------------------------\r\n知耻而后勇.\r\nlet's go!\r\n\r\n*** 2016-01-21\r\n------------------------------------------------------------------------\r\nwindow.location.search可以获取url里面的查询的参数。\r\n今天遇到一个问题：h5调用app接口。这个很难做兼容。\r\n*** 2016-01-20\r\n------------------------------------------------------------------------\r\nnohup my/go/command   &    可以把程序丢到后台去，　注销不会kill这个进程，　重启可以。若用ctrl+z做相同的事，　退出当前终端，　进程被kill.\r\n\r\n*** 2016-01-19\r\n------------------------------------------------------------------------\r\nzsh终端里面可以直接输入文件夹名，　进入目录，不需要加前缀cd。\r\n..直接道上一级目录。~直接到home目录来了。 不错。\r\n\r\n\"计划这个词，只是将构思束之高阁的另一种表达方式。只要想到好的构思，我们立刻就着手实现。\"  --《黑客与画家》\r\ninstll phpbrew to control  version of php. [[https://github.com/phpbrew/phpbrew][phpbrew]]\r\n\r\n*** 2016-01-18\r\n------------------------------------------------------------------------\r\n备案提交了，下周拍下照，备案应该就快下来了。我自个儿的网站的第一个hello　world就快出来了。到时候，有的写了。写作于我而言有特殊的用处。对于我来说，是真正的好记性不如烂笔头。而且随着岁月溜去，能留下某一下瞬间的想法，不是一件很有意思的事情么？　\r\nrsync -av　file (or dir) nil@xxx.xx.x.xxxxx:/home/nil 远程复制命令，　niubility!\r\n\r\n*** 2016-01-17\r\n------------------------------------------------------------------------\r\n下划线和竖线都比矩形的光标要快。\r\n\r\n*** 2016-01-16\r\n------------------------------------------------------------------------\r\n+ vim 中直接!clisp %执行当前lisp文件，　无须退出。\r\n+ ssh key \r\n+ ssh-keygen -t rsa -c 'email'\r\n\r\n+ 安装composer并且设置为全局变量\r\n  curl -ss https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\r\n\r\n1999年的那年，　京东和阿里不同的领导人的定位，居然发展成今天的格局。定位不同，发展的速度，方向差异竟然这么大！\r\n\r\n*** 2016-01-14\r\n------------------------------------------------------------------------\r\n+ chsh -s /bin/zsh root\r\n+ chsh -s /bin/zsh 当前用户修改bash=>zsh\r\n\r\n+ curl -ssl http://git.io/git-extras-setup | sudo bash /dev/stdin\r\n  安装git summary 代码统计\r\n+ curl -ssl http://git.io/git-extras-setup | sudo bash /dev/stdin\r\n  安装git summary 代码统计\r\n\r\n+ 查询某一列重复的记录\r\n  select user_name, count(*) as count from user_table group by user_name having count>1; \r\n\r\n+ sudo nginx -s reload 可以替代sudo service nginx restart\r\n+ 丧心病狂的配置啊\r\n  git config --global alias.lg \"log --color --graph --pretty=format:'%cred%h%creset -%c(yellow)%d%creset %s %cgreen(%cr) %c(bold blue)<%an>%creset' --abbrev-commit\"\r\n\r\n*** 2016-01-13\r\n------------------------------------------------------------------------\r\n学了点emacs的皮毛， 感觉不是很顺手，毕竟vim使用快一年半了。但是emacs应该是lisp入门的绝好材料。\r\n+ c-p上，c-f后, c-b左，c-n下一\r\n+ c-l上中下屏幕切\r\n+ c-x c-q只读模式， 相当于vim的普通模式\r\n+ c-v下一页， m-v上一页, \r\n+ control和alt基本上是对着干， vim里面是大小写对着来。\r\n+ c-a和c-e将光标移到“一行”的头尾， m-a和m-e将光标移动到\"一句\"的头尾\r\n\r\n*** 2016-01-12\r\n------------------------------------------------------------------------\r\nlisp是什么样的语言？这个们进去会怎么样？看了《黑客与画家》， 很有冲动， 想钻进这道门里去。在知乎，百度，google， 各种途径里面去找它的点点滴滴， 迫切想找一个入口。\r\n这两天的事物很有冲击力：虾米的大气音乐， deepin系统的使用， 对lisp的着迷， 。。。。。。\r\n脑子充血了，反正。不管是什么路了。我冲下去了！\r\n\r\n*** 2016-01-10\r\n------------------------------------------------------------------------\r\nfrom today , use deepin system for my own computer system\r\nuse english everyday \r\n\r\ngood beginning!\r\ndeepin install php7.0.2   by \"[[http://blog.sina.com.cn/s/blog_40bb2de40102w718.html][deepin下安装php7]]\"\r\n\r\nsleep well tonight, tomorrow sun will still rises\r\n\r\ngtkhash\r\nubuntu下校验文件的hash值工具\r\n*** 2016-01-08\r\n--------------------------------------------------------------------------\r\n\r\n+ 测试git rebase -i\r\n+ find / -name 'metronic' -type d   # 查找目录\r\n+ find / -name components_editors.html -print # 查找文件\r\n\r\n*** 2016-01-04\r\n--------------------------------------------------------------------------\r\n学习应该是随时随地, 从项目中吸收养分. 以项目中遇到的问题和疑点展开, 由点到面的蔓延.而不是特意的去学习各种还没有用上的东西. 学以致用是最适合自己的学习东西的方法.\r\n随着经验的积累, 知识结构也会慢慢完善起来. 最后再补充缺失的知识结构.\r\n越学越有意思了.\r\n\r\n*** 2016-01-04\r\n--------------------------------------------------------------------------\r\ninsert into  replace into 和 insert的区别, \r\n\r\ninsert into表示插入数据，数据库会检查主键，如果出现重复会报错； \r\nreplace into表示插入替换数据，需求表中有primarykey，或者unique索引，如果数据库已经存在数据，则用新数据替换，如果没有数据效果则和insert into一样； \r\ninsert ignore表示，如果中已经存在相同的记录，则忽略当前新数据\r\n*** 2016-01-03\r\n--------------------------------------------------------------------------\r\n凌晨四点, 醒. 人生百年, 白驹过隙. \r\n\r\n\"\r\n代码review ，合并master 之前还是要认真做代码审查，提高代码质量\r\n开发之前不要急着coding，先做到心里有比较完整的思路，再开始，要注意一开始代码的质量，不要等到最后去优化，优化，可以随时随地\r\n\"\r\n------ 旺旺\r\n\r\n*** 2016-01-01\r\n--------------------------------------------------------------------------\r\n还是应该打实基础.\r\n\r\n*** 2015-12-28\r\n--------------------------------------------------------------------------\r\n+ extract() 函数把数组按键值映射出来.\r\n+ ctrl-t 和ctrl-o, ctrl-i的区别是?\r\n\r\n*** 2015-12-27\r\n--------------------------------------------------------------------------\r\nadminlte 这个后台样式也不错\r\n\r\n*** 2015-12-26\r\n--------------------------------------------------------------------------\r\nmetronic 有很多的js\r\n终端界面的颜色不太好看.\r\n技术,没有终点.\r\n\r\n*** 2015-12-25\r\n--------------------------------------------------------------------------\r\n到过一个地方之后，可能都会对之前不可企及的东西不以为然。比如，买过一个体验不错的耳机之后，你之前的那些随手机赠送的耳机，将变得难以忍受。甚至宁愿不听。\r\n\r\n*** 2015-12-24\r\n--------------------------------------------------------------------------\r\nmysql 声明变量及赋值\r\nselect @a:=1;select count(*) from table_name where 1=1 and id>1 and (@a:=@a+1);select @a;\r\n\r\n*** 2015-12-23\r\n--------------------------------------------------------------------------\r\nhttp定义了与服务器交互的不同方法，最基本的方法有4种，分别是get，post，put，delete。url全称是资源描述符，我们可以这样认为：一个url地址，它用于描述一个网络上的资源，而http中的get，post，put，delete就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，get一般用于获取/查询资源信息，而post一般用于更新资源信息\r\n\r\n\"理论上讲，post是没有大小限制的，http协议规范也没有进行大小限制, post数据是没有限制的，起限制作用的是服务器的处理程序的处理能力\"\r\n\r\npost的安全性要比get的安全性高\r\nget是向服务器发索取数据的一种请求，而post是向服务器提交数据的一种请求\r\n\r\nhttp定义了与服务器交互的不同方法，最基本的方法有4种，分别是get，post，put，delete。url全称是资源描述符，我们可以这样认为：一个url地址，它用于描述一个网络上的资源，而http中的get，post，put，delete就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，get一般用于获取/查询资源信息，而post一般用于更新资源信息。\r\n\r\n1.根据http规范，get用于信息获取，而且应该是安全的和幂等的。\r\n\r\n　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，get 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。\r\n\r\n　　* 注意：这里安全的含义仅仅是指是非修改信息。\r\n\r\n　　(2).幂等的意味着对同一url的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：\r\n\r\n　　幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。\r\n　　幂等有一下几种定义：\r\n　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。\r\n　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。\r\n\r\n[[http://www.cnblogs.com/sjrhero/articles/1832747.html][参考]]\r\n\r\n*** 2015-12-13\r\n--------------------------------------------------------------------------\r\n今天想孙晨请教个问题，才发现自己平时阐述问题都是不清楚的。自己都讲不清楚这个问题，还怎么指望请教别人？怎么加强自己的表达能力？\r\n\r\n*** 2015-12-12\r\n--------------------------------------------------------------------------\r\n锻炼身体对于一个程序员来说,是至关重要的.重要性甚至应该排在工作之前.无视健康,终究会败在健康下.\r\n继续坚持锻炼.\r\n\r\n突然冒出一个想法.看看怎么实现它.\r\n\r\n下午在深大散步, 借书无果. 后面走到校园内湖边上, 仰躺在湖边的草地上想了许多.\r\n\r\n*** 2015-12-10\r\n--------------------------------------------------------------------------\r\n一般sql我都按照这样的格式\r\n\r\nselect\r\nfields.....,\r\nfields.....\r\nfrom xxx as xxx\r\ninner join xxx as xxx on xxx=xxx\r\nwhere xx = xx\r\nand yy = yy\r\nand zz = zz\r\ngroup by xxx\r\norder by xxx\r\nlimit xxx offset xxx\r\n\r\n*** 2015-12-03\r\n--------------------------------------------------------------------------\r\n终端里面访问sql， 可以用explain开头， 可以查询索引的使用是否合理\r\n奇怪,在家里的电脑上push的东西,远程有图标记录, 在公司就没有. 这是什么原因?\r\n\r\n*** 2015-12-01\r\n--------------------------------------------------------------------------\r\n创建表添加注释：\r\ncreate table groups( \r\ngid int primary key auto_increment comment '设置主键自增',\r\ngname varchar(200) comment '列注释',\r\n) comment='表注释'\r\n\r\n*** 2015-11-30\r\n--------------------------------------------------------------------------\r\n自行车：\r\n山地车重要的部分包括车架，前叉，刹车，变速，车轮。\r\n先说车架，就材质来说，车架有高碳钢的，有铝合金的，当然铝合金比较轻巧，高碳钢维修起来比较方便。就整体而言，车架分为硬车架和全避震车架，两者各有优缺点，硬车架骑行轻便，全避震车架适用于复杂路况\r\n再说前叉，简单分为硬前叉和带避震的前叉，细分的话，依次为弹簧叉，阻力叉，油簧叉，油气叉，前叉越高级越需要细心呵护，一般情况下，选个弹簧叉就能满足普通人的需要了。\r\n然后是刹车，明显地分为碟刹和v刹，两者工作原理不同，价格差别也很大，v刹靠摩擦，碟刹靠制动轴，v刹是抱死式的，经常高速骑行的最好不要用v刹，抱死易侧滑。\r\n其次是变速，包括指拨，指拨有手拨和指拨之分，前拨，后拨，飞轮（飞轮有普通旋式和定位式，定位式更精确）及牙盘。\r\n至于车轮，车轮需要注意的是车圈和轮胎，车圈有刀圈和t型圈之分。外胎的形状对车手有影响，我们大致根据路面选择轮胎的形状即可。\r\n最后简要说说其他部位，有车条（整体式车轮是没有车条的），停车支撑，车把（根据个人需要选择合适的车把），鞍座（大都符合人体工程学，一般都很舒服），花鼓（即轴，分锁死式和快拆式），中轴（梅花孔中轴，方孔中轴），链条（长距离骑行需要自备链条油）。\r\n\r\n\r\natom 是一种基于xml（标准通用标记语言的子集）的文档格式以及基于http的协议，它被站点和客户工具等用来聚合网络内容，包括weblog和新闻标题等,它借鉴了各种版本rss的使用经验 atom正走在通往ietf标准的路上，在这之前，atom的最后一个版本是\"atom 0.3\"，并且已经被相当广泛的聚合工具使用在发布和使用(consuming)上。\r\n值得一提的是, blogger和gmail这两个由google提供的服务正在使用atom.\r\natom是开发一个新的网志摘要格式以解决目前rss存在的问题混乱的版本号，不是一个真正的开放标准，表示方法的不一致，定义贫乏等等。\r\n它与rss相比来讲，有更大的弹性。\r\n\r\n*** 2015-11-29\r\n--------------------------------------------------------------------------\r\n\r\n手筋特训看完一遍了.\r\n换个环境,都事物的看法会有些不同.\r\n*** 2015-11-27\r\n--------------------------------------------------------------------------\r\n莫比乌斯环只有一面\r\n\"假定那是一个传奇，任何一个传奇终将落幕，但绕梁若干世，被传颂。我个人更加认为小李的奇在敢于退出韩国棋院的休职，奇在他每逢提及大李必称李昌镐老师。40岁的乔丹退役时，科比25岁，我们假定乔丹是传奇。那么，科比如说出单挑5%的话……再或者，对手是吴清源先生……传奇，只是输给岁月，而非隔代的人。目前这个世道，还真不知道那个运动员有什么霸气。年少，只是懂棋，而非悟道罢了\"\r\n柯洁太狂了。忘了上次“让井山裕太血贱五步”的言论了。\r\n*** 2015-11-26\r\n--------------------------------------------------------------------------\r\nphp -r \"echo date('y-m-d h:i:s', strtotime('+8').php_eol)\"\r\n命令行里面运行php程序输入，\r\n拉丁猪游戏的实现\r\n*** 2015-11-25\r\n--------------------------------------------------------------------------\r\n+ 判断回文小程序\r\n+ aptitude 安装效果比apt-get 更好。\r\n+ gpasswd -d tml smbuser\r\n  正在将用户“tml”从“smbuser”组中删除\r\n+ gpasswd：未知成员 tmlgpasswd -d tml smbuser\r\n  正在将用户“tml”从“smbuser”组中删除\r\n  gpasswd：未知成员 tml\r\n*** 2015-11-17\r\n--------------------------------------------------------------------------\r\n\"o use an analogy, if algorithms were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century. the people who hate algorithms are the ones who just want to know how to drive their car on the highway, just like everyone else.\"\r\n\"if you want to become a good programmer, you can spend 10 years programming, or spend 2 years programming and learning algorithms.\"\r\n\"算法是一种将有限计算资源发挥到极致的武器，当计算资源很富余时算法确实没大用，但一旦到了效率瓶颈算法绝壁是开山第一刀。\"\r\n\"基于各种数据结构上的增删改查。如字符串的查找翻转，链表的查找遍历合并删除，树和图的查找遍历，后来为了更好的查找，我们想到了排序，排序仍然不够，我们有了贪心、动态规划，再后来东西多了，于是有了海量数据处理，资源有限导致人们彼此竞争，出现了博弈组合概率。\"\r\n\r\n*** 2015-11-16\r\n--------------------------------------------------------------------------\r\n三天不练手生。alias mydir='cd /xxxx/xxxx' 自定义别名\r\n\r\n*** 2015-11-15\r\n--------------------------------------------------------------------------\r\n\r\n只有打碎些东西,有的化学反应才会发生.慢慢的,我开始从各方面不自觉的运用围棋的翻盘观念来反省日常生活.\r\n\r\n*** 2015-11-13\r\n--------------------------------------------------------------------------\r\n要注意细节，很多个细小的优化，一点点持续地积累，积少成多，最终汇聚为惊艳的成果。为山九仞，岂一日之功。\r\n\r\n*** 2015-11-12\r\n--------------------------------------------------------------------------\r\ncli command : php -i  -> 图形界面下phpinfo()的输出效果\r\nphp -a : 供交互式 shell，和 ruby 的 irb 或 python 的交互式 shell 相似，此外还有很多其他有用的命令行选项。\r\n\r\n\"一款开源软件能否在商业上成功，很大程度上依赖三件事 - 成功的 user case, 活跃的社区和一个好故事 \"\r\n\r\n今天安装vagrant布置一个多开发环境,  修改vagrantfile后发现一个问题：vagrant ssh启动时报错->  \r\n\r\nthere is a syntax error in the following vagrantfile. the syntax error\r\nmessage is reproduced below for convenience:\r\n/xxx/vagrantfile:54: syntax error, unexpected keyword_end, expecting end-of-input\r\n\r\n另外，不能把目录设置成777的权限。即使是别人给你的环境。也不行。权限一定要控制好。\r\n\r\nruby语言是日本人发明的。牛b.\r\nruby 的end不能顶格写!\r\n\r\n*** 2015-11-10\r\n--------------------------------------------------------------------------\r\n+ kill process by key words\r\n  - ps -ef| grep chrome|cut -c 9-15|xargs kill -9\r\n  - \"cut -c 9-15\" ——截取输入行的第9个字符到第15个字符，而这正好是进程号pid\r\n  - \"xargs kill -9\" ——xargs 命令是用来把前面命令的输出结果(pid)作为\"kill -9\"命令的参数，并执行该命令。\"kill -9\"会强行杀掉指定进程。\r\n\r\n*** 2015-11-05\r\n--------------------------------------------------------------------------\r\nphalcon框架下， 使用empty()函数， uc浏览器和其他浏览器表现不一样。\r\n\r\n*** 2015-11-04\r\n--------------------------------------------------------------------------\r\nphp是用c语言写的，要更深入的学习php， 必须对c语言有所了解。是先学算法，还是c？还是同时展开？这是个问题。\r\nuc浏览器似乎和别的浏览器有很大的不同。\r\n\r\n*** 2015-11-03\r\n--------------------------------------------------------------------------\r\n细心, 细心，再细心! 又是一个逗号的问题。\r\n再多的细心都不为过。\r\n安装了 phpunit 单元测试\r\n针对类 class 的测试写在类 classtest中。\r\nclasstest（通常）继承自 phpunit_framework_testcase。\r\n测试都是命名为 test* 的公用方法。\r\n也可以在方法的文档注释块(docblock)中使用 @test 标注将其标记为测试方法。\r\n在测试方法内，类似于 assertequals()（参见 附录 a）这样的断言方法用来对实际值与预期值的匹配做出断言。\r\n\"当你想把一些东西写道print语句或者调试表达式中时， 别这么做， 将其写成一个测试来代替。\"\r\n--martin fowler\r\n\"单元测试主要是作为一种良好实践来编写的，它能帮助开发人员识别并修复 bug、重构代码，还可以看作被测软件单元的文档。要实现这些好处，理想的单元测试应当覆盖程序中所有可能的路径。一个单元测试通常覆盖一个函数或方法中的一个特定路径。但是，测试方法并不一定非要是一个封装良好的独立实体。测试方法之间经常有隐含的依赖关系暗藏在测试的实现方案中。\"        --adrian kuhn et. al.\r\nphpunit支持对测试方法之间的显式依赖关系进行声明。这种依赖关系并不是定义在测试方法的执行顺序中，而是允许生产者(producer)返回一个测试基境(fixture)的实例，并将此实例传递给依赖于它的消费者(consumer)们。\r\n生产者(producer)，是能生成被测单元并将其作为返回值的测试方法。\r\n消费者(consumer)，是依赖于一个或多个生产者及其返回值的测试方法。\r\n\r\n*** 2015-11-01\r\n--------------------------------------------------------------------------\r\n余弦，博客\r\n\"这是一个混乱的世界，我们都在各种怪圈中，很多谜必须跳出这个圈才有解。那些被认为无解的不会真的无解，而是在我们所认知的范围内，它们无解。我自认为我不是一个平淡的人，神奇的宇宙与人类行为给我带来了很多启示，我不会一直在某种形态下走下去，却肯定会在一种状态让我的思维与成果一直延续到永久。 对知识我们需要充满敬畏。\" --余弦\r\n\"我对黑客的定义很简单「守正出奇且具备创造力的群体」 \"\r\n\r\n*** 2015-10-30\r\n--------------------------------------------------------------------------\r\n我已经决定研究下h5+flash上传的结合了。\r\n\r\n*** 2015-10-28\r\n--------------------------------------------------------------------------\r\nlet mapleader=\",\"\r\n\r\n*** 2015-10-27\r\n--------------------------------------------------------------------------\r\n今日小结：\r\nnerdcomment插件，~/.vimrc 设置leader键-> let <leader>=\",\"\r\n公共部分的尽量不要轻易改。\r\n\r\n*** 2015-10-26\r\n--------------------------------------------------------------------------\r\n\"是否具有算法知识和技术的坚实基础是区分真正熟练的程序员和初学者的一个特征.使用现代计算技术， 如果你对算法懂得不多，你也可以完成一些任务，但是，如果有一个好的算法背景，那么你可以做的事情就多得多.\" \r\n-- 算法导论\r\n\r\n*** 2015-10-23\r\n--------------------------------------------------------------------------\r\n+ sudo apt-get install kubuntu-desktop\r\n+ kde 下截屏命令行工具scrot\r\n+ sudo apt-get install scrot (命令行下的截图工具)\r\n+ scrot 获取整个桌面\r\n+ scrot ~/photos/my_desktop.png指定目录和文件名\r\n+ scrot -s 区域截屏\r\n+ scrot -s -d 5 延时截图\r\n+ scrot -q 50 调整图片质量， 默认75, 数字越大质量越高\r\n+ scrot -t 10 尺寸， 减小截屏的尺寸到原图的10%\r\n+ scrot -e 'mv $f ~/screenshots' scrot允许你发送保存的截屏图像给任意一个命令作为它们的输入。这个选项在你想对截屏图像做任意后期处理的时候十分实用。截屏的文件名/路径跟随于“$f”字符串之后。\r\n+ 机械键盘+kde环境下 fn+prsts截屏\r\n\r\n+ php中换行的问题\r\n+ mac换行\\r\r\n+ linux换行\\n\r\n+ window换行\\r\\n\r\n+ ctrl+shift+m切换终端的菜单\r\n\r\n*** 2015-10-22\r\n--------------------------------------------------------------------------\r\n用心做一件事,胜过做一百件马马虎虎的事. 更不要急于求成. 天下武学, 虽然无坚不摧, 唯快不破. 但不能一味求快. 急躁总是伴随着失误和破绽的. 张弛有度, 一步步扎扎实实打下厚实的基础. \r\n还有时时反省, 先从自身原因找起. 鞋子合不合适, 要先看自己的脚的大小. \r\n\r\n*** 2015-10-21\r\n--------------------------------------------------------------------------\r\n每天路上读点书, 过不一样的时间, 看不同的风景.\r\n\"一个真正无所畏惧的人的强大依托就是内心的强大.在任何时候都不要轻易否定自己,要接受自己,热爱自己, 无论是毫无经验还是一事无成都要把自己当成一个堂堂正正的人来看待. 每天都展开对自己的思想诚实的战斗.\" \r\n年轻人要培养一双神奇的眼睛, 能发现旁人感觉不到的新鲜事物, 然后为他们命名. 在命名之后, 人们就发现世界诞生了新的部分.\r\n-- 尼采\r\n\r\n*** 2015-10-20\r\n--------------------------------------------------------------------------\r\n活在当下.多整理,整理出效率. 重点找出每天的那个20, 而非80.\r\n每天看点书. 地铁上的时间还是比较多的.每天来回的路上足足有一个半小时.\r\n一定要利用好这些零碎时间.\r\n读书可以让自己平静下来, 睡眠也好多. 感觉有些充实. 上周日到深大图书馆看半天书,深有感触. 一年多没看书了. 拿起来, 挺爽!\r\n往后, 周末腾一天爬山, 一天泡图书馆. \r\n每周借五本以上杂书, 题材不限, 周日下午六点前还, 借. 图书馆好多妹子!\r\n\r\n*** 2015-10-16\r\n--------------------------------------------------------------------------\r\n每天太阳升起,必须快跑.\r\n*** 2015-10-16\r\n--------------------------------------------------------------------------\r\n每天进步一点点，一小步，一小步的攀登。\r\n*** 2015-10-11\r\n--------------------------------------------------------------------------\r\nflash + h5(input(file)) 上传\r\n\r\n*** 2015-10-10\r\n--------------------------------------------------------------------------\r\nlla 可以显示ll -a 的结果\r\n*** 2015-10-02\r\n--------------------------------------------------------------------------\r\nsql注入\r\n-正确的过滤\r\n-使用合理的字符集\r\n-宽字节注入\r\nxss类型\r\n-反射型\r\nphp 职业规划-> 职业生涯乃至人生, 持续性.\r\n薪资<->title\r\n犯下的错误和花去的时间不能重来．\r\n如果你找不到人生的意义，那么可以先累积money．等你找到意义的时候，一定会用得上的, 喵～\r\n提升架构能力的两个基本原则\r\ndon't repeat yourself~\r\n正交性\r\n\r\n很多时候，技术提升的瓶颈是因为对业务理解的不够透彻．\r\n*** 2015-10-01\r\n--------------------------------------------------------------------------\r\n\r\nvimium 使用时，网页中复制有个比较笨的方法就是先用 /搜索选中要复制的内容的前几个字符，然后shift+右方向键选择复制内容，ctrl+c就可以复制了。\r\n或者进入visual模式，然后shift+向右键\r\n机械键盘，敲起来，果然是飞一般的感觉．\r\n\r\n*** 2015-09-30\r\n--------------------------------------------------------------------------\r\n新的机械键盘，爽歪歪～～，　手感杠杠的\r\n\r\n*** 2015-09-29\r\n--------------------------------------------------------------------------\r\nctags -r -f .tags\r\n\r\n--------------------------------------------------------------------------\r\n*** 2015-09-20\r\n--------------------------------------------------------------------------\r\ncanvas画股票分时图\r\n--------------------------------------------------------------------------\r\n*** 2015-09-19\r\n--------------------------------------------------------------------------\r\nscp user@196.196.196.196:/home/test.tar.gz /home/test\r\n\r\nbombcitys(3500);\r\n\r\nfunction bombcitys(timestep){\r\nsetinterval(function(){\r\nzidong();\r\n}, timestep);\r\n}\r\n\r\nfunction zidong(){\r\n$(citybombdivs[cityindex]).addclass('exchange-on').siblings().removeclass('exchange-on');\r\n\r\nif(citybombdivs.length == cityindex){\r\ncityindex = 0;\r\nzidong();\r\n}else{\r\ncityindex += 1;\r\n}\r\n}\r\n\r\n// 滚轮触动 animation\r\n$(window).scroll(function() {\r\nvar height = document.documentelement.scrolltop || document.body.scrolltop;\r\n\r\nvar $investanimation = $mainer.find('#investanimation');\r\nif (height >= 1431 && height <= 1600) {\r\n$investanimation.find('.index-box2').addclass('animation');\r\n}else{\r\n$investanimation.find('.index-box2').removeclass('animation');\r\n}\r\n\r\nvar $guzhianimation = $mainer.find('#guzhianimation');\r\nif(height >= 1900 && height <= 2200) {\r\n$guzhianimation.find('.index-box3-1').addclass('animation');\r\n}else{\r\n$guzhianimation.find('.index-box3-1').removeclass('animation');\r\n}\r\n\r\n});\r\n\r\n--------------------------------------------------------------------------\r\n*** 2015-09-17\r\n--------------------------------------------------------------------------\r\n(1) 好点的写法是什么？\r\nvar hovtarget = $('#testid').children();\r\nhovtarget.hover(function(){\r\n$(this).children().find('.icon-goodness').addclass('animation');\r\n},function(){\r\n$(this).children().find('.icon-goodness').removeclass('animation');\r\n});\r\n\r\n(2)\r\n\r\nvar index = 0;\r\nfunction zidong(){\r\n$(lis[index]).addclass('exchange-on');\r\n$(lis[index]).siblings().removeclass('exchange-on');\r\n\r\nif (index == lis.length) {\r\nindex = 0;\r\n}else{\r\nindex += 1;\r\n}\r\nconsole.log(index, lis.length);\r\n}\r\n\r\nsetinterval(\"zidong()\", 3000);\r\n(3) \r\n\r\nvar index = 0;\r\nfunction zidong(){\r\n$(lis[index]).addclass('exchange-on');\r\n$(lis[index]).siblings().removeclass('exchange-on');\r\n\r\nif (index == lis.length - 1 ) {\r\nindex = 0;\r\n}else{\r\nindex += 1;\r\n}\r\n//console.log(index, $(lis[index]).children(0).html());\r\n}\r\n\r\nsetinterval(\"zidong()\", 2800);\r\n--------------------------------------------------------------------------\r\n*** 2015-09-13\r\n--------------------------------------------------------------------------\r\n(1) mysql 两个函数\r\n  + from_unixtime(time_stamp) -> 将时间戳转换成日期\r\n  + unix_timestamp(date)      -> 将指定的日期或者日期字符串转换成时间\r\n\r\n  - select from_unixtime(1382544000);\r\n  - select unix_timestamp(date('2015-09-15'));\r\n\r\n+ 查询今天的注册记录\r\n  - select count(*) from table_main where date_format(from_unixtime(create_time, '%y%m%d'))=date_format(now(), '%y%m%d');\r\n  - select count(*) from table_details where create_time >= unix_timestamp('2015-09-16 00:00:00') and create_time <= unix_timestamp('2015-09-16 23:59:59');\r\n  - update table_main set update_time= date_add(create_time, interval 30 day) where uid=2964994 limit 1;\r\n--------------------------------------------------------------------------\r\n*** 2015-09-13\r\n--------------------------------------------------------------------------\r\n(1) php 升级：　[[https://wiki.php.net/phpng][这里]] ， 还有[[http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04][还有这里]]\r\n\r\n(2) php7 is so super！\r\n\r\nchange vim background \"solarized\" , add solarized.sh , chmod + x solarized.sh, then ./solarized.sh dark, 这样就可以让ubuntu14.04的vim 运行起solarized，并且和官网的颜色一样了． 原因是ubuntu14.04终端本身没有solarized的配色\r\n\r\n\r\n(3) nginx conf\r\n[[https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-14-04-lts][nginx conf 配置参考]]\r\n\r\nserver {\r\nlisten 80 default_server;\r\nlisten [::]:80 default_server ipv6only=on;\r\n\r\n\r\nroot /web/test;\r\nindex index.php index.html index.htm;\r\n\r\nserver_name test.com www.test.com;\r\n\r\nlocation / {\r\ntry_files $uri $uri/ =404;\r\n}\r\n\r\n\r\nlocation ~ \\.php$ {\r\nfastcgi_split_path_info ^(.+\\.php)(/.+)$;\r\nfastcgi_pass unix:/var/run/php5-fpm.sock;\r\nfastcgi_index index.php;\r\nfastcgi_param script_filename /usr/share/nginx/html$fastcgi_script_name;\r\ninclude fastcgi_params;\r\n}\r\n\r\n}\r\n\r\n(4) 迁移代码到/web/\r\n\r\n--------------------------------------------------------------------------\r\n(5) 验证码的用处\r\n一般服务器端业务中，写请求的消耗远大于读请求, 作用：　区分机器／人的请求．\r\n技术要点：\r\na)底图的实现，并且添加干扰元素\r\nb)生成验证内容\r\nc)验证内容保存在服务器端\r\nd)验证内容的检验\r\n\r\n\r\n--------------------------------------------------------------------------\r\n*** 2015-09-12\r\n--------------------------------------------------------------------------\r\narray_multisort()\r\nusort()\r\nthese two function of php is so cute!!! \r\n\r\n\r\n在互联网内容中每日浸泡的我们每个人，思路就象一只跳来跳去的猴子，一会想这个，一会想那个，而训练自己集中注意力就是要驯服这只大猴子。 \r\n\r\n在日常生活中，你可以采用下面这些技巧，让自己更加专注。 \r\n\r\n1、专注力到底是什么？ \r\n\r\n专注的概念其实很简单，它就是讲你从多个方向中解放出来，一次只将精力放在一件事上。 \r\n\r\n“concentration is taking your mind off many things and putting it on one thing at a time.” \r\n\r\n2、控制你的思维 \r\n\r\n学会控制你的思维。事实上，如果你认定你可以保持专注，那么你就可以。 \r\n\r\n你可以试试“5 more”法则，当你就快要放弃的时候，告诉你自己：我还可以再坚持五分钟。完成这五分钟之后，再来一轮新的五分钟。如此一来，你的大目标就在这样的每一个五分钟的过程逐渐完成。 \r\n\r\n还有一个小窍门：对于本可以不需要手参与的事情，增加手参与一下，是特别好的一个方法。比如，看书的时候，同时手上做笔记。 \r\n\r\n3、最麻烦的任务先做 \r\n\r\n在完成一系列的任务时，将难的任务放在第一个，因为最开始做一件事时，我们总是会更加专注和富有能量。 \r\n\r\n如此一来，你就可以发现，事情完成得越多就越容易。 \r\n\r\n4、只关注你生活中最重要的事 \r\n\r\n很多时候，我们会慢慢变成我们专注的那个人或事。 \r\n\r\n你是否注意到，结婚多年的夫妻会变得越来越像对方，而在性格上，很多人会逐渐和他们工作的上司、同事甚至是和他朝夕相处的宠物越来越像。 \r\n\r\n人的精力是有限的，如果你一下操心太多事情，就坚持2-3件你已经开始操心的事情，然后放弃剩下的那些。 \r\n\r\n这些放弃不仅包括一些工作和生活上的目标，甚至会包括你长久以来的生活习惯甚至是你的一些人脉关系，但是请你记住，你是在为自己的人生做选择。 \r\n\r\n5、明确自己的目标 \r\n\r\n我们都要做一个目的导向型的人，然后顺应着心中的方向一点一点去实现。不要担心如果目标不能够100%实现怎么办，我们所需要做的，就是努力去接近它。 \r\n\r\n没有目标的持续高强度的专注于某件事，将只会造成困扰。 \r\n\r\n6、找到你的专注力“杀手” \r\n\r\n如果把思路比作猴子，知道为什么会注意力不集中，就容易驯服这只大猴子了。注意力不集中的原因主要分内因和外因两类: \r\n\r\n外部干扰包括：噪音，对话，不舒服的椅子和桌子，不合适的灯光，电视，工作，家务，网络，电子邮件等。 \r\n内部因素包括：饿了，累了，病了，没有动力，感到厌烦，没有兴趣，焦虑，压力和烦恼，消极的想法，白日梦等等。 \r\n找到这些杀手，排除他们。 \r\n\r\n7、找准你效率最高的时间 \r\n\r\n专注并不意味着你能够在你所有的工作时间里满负荷工作。人都会有消极的状态（并不犯困却又无法高效工作时），深入了解自己，知道什么时候你的效率最高。 \r\n\r\n如果你觉得自己在晚上写作的效率更高，那么就安排晚上作为你的写作时间，这样你就可以在第二天早上寄出文章，这样的方式能让你更高效。 \r\n\r\n8、学会休息，保证充足睡眠 \r\n\r\n就算是牺牲一些活动，也要坚持准时睡觉，同时管理好白天的日常安排，保证晚上能够有至少8小时的睡眠时间。床单和床垫一定要买质量好的。这是一个非常有价值的投资，因为人的一生中有30%的时间是需要花在床上的。 \r\n\r\n你以为你在刷朋友圈，但其实同时被刷的是你的大脑；存在感可能没刷着，时间浪费确是真真切切的。\r\n\r\n电脑硬盘碎片化了可以进行磁盘整理，大脑注意力碎片化了却没有简单的程序一键修复。 专注是一种能力，它需要你花费很长的时间来学习和培养。\r\n\r\n--------------------------------------------------------------------------\r\n*** 2015-09-09\r\n--------------------------------------------------------------------------\r\ntest\r\n\r\n*** 2015-09-07\r\n\r\n:%s/([\\u4e00-\\u9fa5]+)/{{ ___('\\1') }}/g\r\n\r\n*** 2015-09-03\r\n\r\n目前搜索引擎对div的友好程度比table好一些\r\n\r\nhow to install the latest git version? here is the way under ubuntu system\r\n\r\nsudo add-apt-reposotory ppa:git-core/ppa\r\nsudo apt-get update\r\nsudo apt-get install git\r\n\r\ndone!\r\ngit --version\r\ngit version 2.5.1\r\n\r\n\r\nscp -r /home/administrator/test/ root@192.168.1.100:/root/    --> (copy location dir to remote ip dir)\r\nscp /home/administrator/desktop/old/driver/test/test.txt root@192.168.1.100:/root/   --> (copy only one file co remote ip dir)\r\nscp -r root@192.168.62.10:/root/ /home/administrator/desktop/new/                    --> (copy remote dir to location address)\r\n\r\n*** 2015-09-02\r\n\r\n\r\nctrl+;  历史输入补全\r\n\r\n*** 2015-09-01\r\neffortless ctags with git \r\nin vim, to use ctags super sex\r\n\r\n*** 2015-08-31\r\n\r\n\r\nctrl-s在linux里面，是锁死屏幕的快捷键，ctrl-q解锁。\r\n\r\n*** 2015-08-30\r\n\r\n\r\nstudy_note:\r\ntoday learn how to install && use php7\r\nto start with this command : /opt/php7/bin/php -s 0.0.0.0:9009\r\nurl visit by http://0.0.0.0:9009\r\n\r\nso hot \r\n*** 2015-08-22\r\n\r\n\r\nnotice:\r\nadd ag plugin today \r\nhow to use it!\r\n:ag [options] {patterns} [{directory}]\r\n-----------------------------------------\r\nsometimes \"git grep\" is even faster\r\n----keyboard shortcuts---\r\nin the quickfix window, you can use:\r\ne  to open file and close the quickfix windows\r\no  to open (same as enter)\r\ngo to preview file(open but maintain focus on ag.vim results)\r\nt  to open in new tab\r\nt  to open in new tab silently\r\nh  to open in horizontal split\r\nh  to open in horizontal split silently\r\nv  to open in vertical split\r\ngv to open in vertical split silently\r\nq  to close the quickfix window\r\n\r\n*** 2015-08-19\r\n\r\nnotice:\r\n这几天扛下来，功力大涨！任何时候都不要害怕问题。要硬着头皮迎上去!\r\n还是那句话：稳住阵脚，冷静观察，沉着应付！\r\n\r\n*** 2015-08-08\r\n\r\n\r\n(1) vim plugin -> surround\r\n\r\ndescription\r\nsurround.vim is all about \"surroundings\": parentheses, brackets, quotes, xml tags, and more.  the plugin provides mappings to easily delete, change and add such surroundings in pairs.  while it works under vim 6, much of the functionality requires vim 7. \r\n\r\nexamples follow.  it is difficult to provide good examples in the variable width font of this site; check the documentation for more. \r\n\r\npress cs\"' (that's c, s, double quote, single quote) inside \r\n\r\n\"hello world!\" \r\n\r\nto change it to \r\n\r\n'hello world!' \r\n\r\nnow press cs'<q> to change it to \r\n\r\n<q>hello world!</q> \r\n\r\nto go full circle, press cst\" to get \r\n\r\n\"hello world!\" \r\n\r\nto remove the delimiters entirely, press ds\" . \r\n\r\nhello world! \r\n\r\nnow with the cursor on \"hello\", press ysiw] (iw is a text object). \r\n\r\n[hello] world! \r\n\r\nlet's make that braces and add some space (use \"}\" instead of \"{\" for no space): cs]{ \r\n\r\n{ hello } world! \r\n\r\nnow wrap the entire line in parentheses with yssb or yss) . \r\n\r\n({ hello } world!) \r\n\r\nrevert to the original text: ds{ds) \r\n\r\nhello world! \r\n\r\nemphasize hello: ysiw<em> \r\n\r\n<em>hello</em> world! \r\n\r\nfinally, let's try out visual mode. press a capital v (for linewise visual mode) \r\nfollowed by s<p>. \r\n\r\n<p> \r\nhello world! \r\n</p> \r\nthis plugin is very powerful for html and xml editing, a niche which currently seems underfilled in vim land.  (as opposed to html/xml *inserting*, for which many plugins are available).  adding, changing, and removing pairs of tags simultaneously is a breeze. \r\nthe \".\" command will work with ds, cs, and yss if you install repeat.vim, vimscript #2136. \r\n\r\n*** 2015-08-07\r\n+ :help grep \r\n  open a buffer containing the search results in linked form. the :silient command may be usedt osuppress the default full screen grep output. the \":grep!\" form of the :grep command doesn't jump to the first match automatically. these commmands can be combined to create a newgrep command:\r\n+ :copen\r\n+ :lopen\r\n+ :lgrep\r\n\r\n\r\n*** 2014-08-06\r\n+ sudo apt-get install zsh\r\n+ chsh /bin/zsh\r\n+ sudo apt-get install oh-my-zsh\r\n\r\n强大的工具。zsh比bash还好玩，而且和bash无缝切换。\r\n\r\n在vim 中想用命令行命令的话： ctry_+z  ，会使vim进入后台工作，fg 恢复vim工作，bg\r\n\r\n或者:!sh&\r\n\r\n*** 2015-08-03\r\n\r\n\r\n节奏突然加快了。\r\n\r\n*** 2015-07-24\r\n安装了php7测试\r\n*** 2015-07-14\r\n真心难难\r\n\r\n\r\n*** 2015-07-09\r\n上线的程序真是提心吊胆～\r\n\r\n*** 2015-07-08\t\r\n\r\n\r\n告别长城了。say goodbye to firewall!\r\nvim : set autochdir 自动切换当前目录为当前文件所在文件目录\r\n*** 2015-07-06\r\n\r\n\r\n(1) 假以时日，必成大器。\r\n*** 2015-07-05\r\n\r\n\r\n(1) 重装了系统。换成ubuntu14.04lts版本。又要配置一些其他的配置。\r\n\r\n*** 2015-06-11\r\n\r\n\r\n不要什么对往版本库推送\r\n*** 2015-06-02\r\n\r\n\r\n昨晚发高烧，还好听过来了。感冒药对我失去效力。以后不能轻易感冒。\r\nnginx配置\r\n*** 2015-06-01\r\n\r\n\r\nhosts配置 \r\n*** 2015-05-29\r\n\r\nphalcon.so  -> /usr/lib/php5/20121212\r\n\r\n*** 2015-05-18\r\n日志也不对啊。。。。。。\r\n*** 2015-05-17\r\nlnmp环境居然没安装成功。\r\n*** 2015-05-14\r\n单向散列加密是指通过不同输入长度的信息进行散列计算，得到固定长度的输出， 这个散列计算过程是单向的，即不能对固定长度的输出进行计算而获得输出信息\r\n对称加密\r\n非对称加密 分公钥和私钥\r\n明文 -> 加密算法(salt)  -> 密文 -> 解密算法(密钥) -> 明文\r\n\r\n*** 2015-05-13\r\n刚上线项目。git太吊了～\r\n\r\n加密形式：\r\nmd5() 加密算法\r\ncrypt() 加密算法\r\nsha1() 加密\r\nurl编码加密\r\nbase64编码加密\r\n*** 2015-05-09\r\n全文索引\r\n------------\r\n全文索引在绝大部分的网站中是不会用到的，\r\n但在数据量巨大（百万级以上）的时候，\r\n这时候通过php模糊查询技术，like效率是比较低的，而且也比较消耗性能。\r\n使用全文索引搜索时注意： \r\n1）数据表引擎必须是myisam,\r\n2)不支持中文;如果需要支持中文需要通过特殊的处理\r\n------------\r\n专注才能学的快。\r\n\r\n*** 2015-05-08\r\n----------\r\n(1) 第一次提测，出现了后台c++方面的问题。ip和端口访问出现了问题。\r\n(2) error_reporting(); \r\n$keywords  = isset($_get['keywords']) ? trim($_get['keywords']) : '';\r\n\r\n(3)搜索结果的关键词高亮显示\r\n\r\n技术点： 利用php的字符串替换功能， str_replace();\r\n\r\n$row['username'] = str_replace($keywords, '<font color=\"red\">'.$keywords.'</font>', $row['username'], \r\n\r\n学习知识点用熟悉它的应用场景\r\n\r\n*** 2015-05-07\r\n-----------\r\n团队发展之路\r\n\r\n对细小任务的完成时间有明确规定，最大限度调动技术团队内的能力，使项目迭代很稳定。这是小公司不能比拟的。\r\n\r\n*** 2015-05-06\r\n-----------\r\n(1) thrift强大～\r\n(2) php模糊查询\r\n索引有什么好处：\r\n如果按照某个条件去检索数据，如果这个条件没有建立索引，查询的时候是会遍历整张表，如果你建立了索引，查询的时候就会根据索引来查询，进而提高查询性能.\r\nmysql 查询\r\n-- 精确查询， 有且只有一条 （用户注册、登录，单条数据更新）\r\n-- 模糊查询， 返回的结果不确定。（站内搜索等）\r\n1. 使用sql匹配模式，不能使用操作符 = 或 ！=， 而是使用操作符like 或 not like\r\n2. 使用SQL匹配模式，MYSQL提供了2种通配符： \r\n    % 表示任意数量的任意字符（其中包含0个）\r\n    _ (下划线)表示的任意单个字符\r\n    3. 使用SQL匹配模式，如果匹配模式中不包含以上2中通配符的任意一个，其查询的效果等同于 = 或 ！=\r\n    4. 使用 SQL 匹配模式忽略大小写\r\n\r\n      #查询用户名以某个字符开头的用户\r\n      查询以 'l' 开头的用户名数据  -> 1%\r\n      eg: SELECT * FROM user WHERE username LIKE 'l%';\r\n      #查询用户名以某个字符结尾的用户\r\n      查询以 ‘e’  结尾的用户名的数据 -> %e\r\n      eg: SELECT * FROM user WHERE username LIKE '%e';\r\n      #查询用户名包含某个字符的用户 -> %o%\r\n      查询用户名包含字符 ‘o’ 的用户\r\n      eg : SELECT * FROM user WHERE username LIKE '%o%';\r\n\r\n      #查询用户名长度为3的用户数据\r\n      eg : SELECT *  FROM user WHERE username LIKE '___';\r\n\r\n      # %  与 _ 的结合\r\n      查询用户名中第二个字符为 ‘o’ 的用户数据\r\n      eg: SELECT * FROM user WHERE username LIKE '_o%';\r\n\r\n      #正则表达式匹配模式(不建议使用)\r\n      . ---> 匹配任意但个字符\r\n      × ---> 匹配0个或多个在它前面的字符\r\n      x* ---> 表示匹配任何数量的X字符\r\n      [..] ---> 匹配中括号中的任意字符\r\n      eg:\r\n      [abc] 匹配 a, b, 或 c\r\n      [a-z] a-z任意字符\r\n      [0-9] 0-9任意字符\r\n      [0-9]* 任意数字\r\n      [a-z]* 任意小写字母\r\n      ^ --> 开头\r\n      $ --> 结尾\r\n      #正则表达式匹配模式使用的操作符, 是REGEXP 或 NOT REGEXP ,有别于SQL模式\r\n      (任何位置满足正则表达式匹配到了模式，就是匹配到了，)\r\n      查询用户名以l开始的用户\r\n      SELECT username FROM user WHERE username REGEXP '^l';\r\n      查询用户名正好是三个字符的用户\r\n      SELET * FROM user WHERE username REGEXP '...$'; //'.....$';\r\n      注意：\r\n      如果仅用通配符 . 来匹配， 有N个  . 就匹配大于等于N个\r\n\r\n      (3) 大公司，把业务精细化管理，技术团队能最大化完成这些划分的任务。看到服务器管理的同事的工作，才知道数据结构和算法才是王道。将武功比之：数据结构和算法才是内功，编程语言只是招法。\r\n\r\n      2015-05-05\r\n      ------------\r\n      大公司的生活压力很大，每天那么多人git push那么多次代码，就自己贡献最少。\r\n      Ctrl+shift+t 和Ctrl+Alt+t打开的终端不太一样。前者同窗口打开，后者另起窗口。\r\n      Ctrl+shift+v直接将粘贴板的东西，粘贴到终端\r\n      2015-05-02\r\n      -------------\r\n      (1)当前要务是分清主次，轻重缓急，长远的技术。在保证工作顺利的前提下，更新自己的it技能。\r\n      (2)逐个击破。各个技术点逐一学习，分化拿下。\r\n      2015-05-01\r\n      -------------\r\n      vim有一个插件可以用python实现vim中直接看hackernews -> vim-hackernews\r\n      2015-04-30\r\n      --------------\r\n      前期的环境已经全部部署完毕，加入tower邮箱团队。五一前的准备工作，已完成。\r\n      下一步，利用一天，熟悉全部常用的git命令;在用两天，熟悉phalcon开发环境下的使用，熟悉forbag源码.\r\n\r\n      mysql root密码忘记，可通过最简单的/etc/mysql/debian.cnf文件中的用户名和密码，\r\n\r\n      # mysql -udebian-sys-maint -p  \r\n      Enter password: <输入[client]节的密码>  \r\n      mysql>use mysql;\r\n      mysql> UPDATE user SET Password=PASSWORD(’newpassword’) where USER=’root’;  \r\n      mysql> FLUSH PRIVILEGES;  \r\n      mysql> quit  \r\n      # mysql -uroot -p  \r\n      Enter password: <输入新设的密码newpassword>  \r\n      来修改。\r\n      ubuntu14.04上快速解决。\r\n      2015-04-29\r\n      ---------------\r\n      （1）linux scp , ssl,这些命令要多用。\r\n\r\n      (2)awk, sed都是很常用的数据处理工具, 还有管道命令grep(选取)\r\n      2015-04-28\r\n      ----------------\r\n      补充： linux的许多命令，今天那个叫开眼了。大神就是大神。总之就一句话：linux原来还可以这样玩～\r\n      tag一个，里程碑式的日子。\r\n      2015-04-28\r\n      -------------\r\n      (1) [[http://www.thinkphp.cn/][thinkphp官网]]\r\n\r\n      [[http://phalconphp.com][phalcon官网]]\r\n\r\n      (2)[[http://requirejs.org/docs/api.html][requirejs]]\r\n\r\n      (3)安装git客户端，并熟悉git的使用方式\r\n\r\n      (4)安装node: [[http://nodejs.org/][node]] (注意下载它的二进制版本，注意机器的位数)\r\n\r\n      (5)安装对应的npm包\r\n\r\n      npm install bower -g\r\n\r\n      npm install grunt -g\r\n\r\n      npm install jsint -g\r\n\r\n      npm install requirejs -g\r\n\r\n      npm install uglify-js -g\r\n\r\n      npm install jshint -g\r\n\r\n      npm install opencc -g\r\n\r\n      npm install gulp -g\r\n\r\n      (6) 用ssh-keygen生成密钥对，设置项目公钥信息\r\n\r\n\r\n(11)安装phaltomjs:[[http://phantomjs.org/][ phaltomjs]]\r\n\r\n(12)php安装memache扩展，thrift扩展，composer\r\n\r\n\r\n2015-04-24\r\n-------------\r\n面试三，这个面试一共四轮，三层技术, 一层hr\r\n\r\n(1)列举五种设计模式，(单元素模式，工厂模式，观察者模式，命令链模式，策略模式，)\r\n\r\n(2)写几种算法的思路，（只写了冒泡算法，选择排序，快速排序，插入排序，）\r\n\r\n(3)数据库的索引的认识，\r\n\r\n(4)事务处理，\r\n\r\n(5)html5 ,canvas\r\n\r\n\r\n(6)php5.2,php5.3,php5.4的重大改进\r\n\r\n\r\n(7)shell的一堆东西\r\n\r\n(8)linux下的awk,sed, grep,等等，一大堆命令\r\n\r\n(9)shell数组\r\n\r\n(10)shell编程做自己的工具补充\r\n\r\n(11)git 分支等, checkout, rebase, 等等\r\n\r\n(12)mysql优化，大数据\r\n\r\n(13)web层面对页面加载的加速\r\n\r\n(14)phalcon的di\r\n\r\n(15)thinkphp模板有什么优缺点\r\n\r\n(16)strtotime输出当前月的最后一天\r\n\r\n(17)js好几道题目(call, apply什么的)\r\n\r\n(18)stdClass\r\n\r\n(19)php的SPL接口有哪些？\r\n\r\n(20)分区分表\r\n\r\n(21)两个域名如何同步登录？\r\n\r\n(22)...\r\n\r\n(23)ajax跨域，（jsonp）\r\n\r\n(24)...ORM等等  (关系型数据模型)\r\n\r\n(25)radis\r\n\r\n(26)html那个什么虚线上下框给黑色，差点写成FFF,还好学过物理，知道0是黑的\r\n\r\n(27)....web漏洞，如何防？\r\n\r\n(28)自己的网站采用了什么办法提速？\r\n\r\n(29)一个打开很慢的网站用什么步骤，什么方法检测问题出在哪里，优化之路?，加速？\r\n\r\n...\r\n\r\n...\r\n\r\n等等，一共60多道。\r\n\r\n面二轮问的直接晕到现在\r\n\r\n三轮的都记不起来了.\r\n\r\n\r\n总之，面试收获很多。对体力脑力都有很多直接的调动，消耗，精进。\r\n\r\n如果准备充分，昨天15k的就拿下了。可惜。\r\n\r\n...\r\n现在脑子还晕着\r\n\r\n今天居然拿不下10k，真心难。但单位挺好的\r\n\r\n\r\n2015-04-23\r\n-------------\r\n面试2： \r\n(1)大数据，高并发的解决办法，数据库设计(10k以上必问!)\r\n\r\n(2)php的垃圾回收机制\r\n\r\n(3)计算一个字符串中某一个字符出现次数。\r\n\r\n(4)递归算法树形输出一个数据表的分类\r\n\r\n(5)自己熟知的开源框架，优缺点，最喜欢那一个？why?\r\n\r\n(6)&引用, 函数内使用global关键字\r\n\r\n(7)传值与引用的区别，应用场景。\r\n\r\n(8)===,==区别，举例说明==成立，===不成立的例子\r\n\r\n(9)魔术方法，并说明之。\r\n\r\n(10)常见的http状态码及分别表示什么？\r\n\r\n(11)详述自己项目中最有意思的问题。\r\n(12)\r\n\r\n\r\n2015-04-22\r\n--------------\r\n面试：\r\n(1) 输出上周一，格式\"2015-03-01\"\r\n\r\n(2) 截取网址后缀： “http://www.xxx.com/xxx/xxx.jpg”的多种方法\r\n\r\n->\r\n\r\na. substr('http://www.xxx.com/xxx/xxx.jpg', -1, 3)\r\n\r\n(3) 高并发，大数据访问，采取什么办法, 为什么采取这种办法\r\n->\r\n配置高性能服务器\r\n优化数据库访问\r\n禁止外部的盗链\r\n控制大文件的下载\r\n使用不同主机分流主要流量\r\n使用流量分析统计软件\r\n(4) sort, asort, ksort的区别,并分别使用不同排序方法实现\r\n\r\n->\r\nsort依据值从小到大排序，键值不参与排序\r\nasort依据值排序，键值参与排序\r\nksort依据键值排序，值参与排序\r\n\r\n(5) 超链接之间如何传递数组, \r\n->\r\n答：先将数组转换成字符串，然后在目标脚本中在将字符串转换成数组，\r\n$arg = implode(',', $names);\r\necho $url = \"localhost/m/index.php?names=\".$arg;\r\n或者cookie, session\r\n表单传递，get, post方式\r\n\r\n\r\n<?php\r\n$var = ‘love you’;\r\n?>\r\n<a href=\"<?php echo 'page02.php?new='.$var;?>\">get</a>\r\n\r\npage02.php\r\n<?php\r\necho $_GET['new'];\r\n?>\r\n\r\n(6) 邮箱验证格式\r\n->\r\n/^[a-z0-9]+([.+\\\\-]*[a-z0-9]*@([a-z0-9]+[a-z0-9]+.{1,63}[a-z0-9]+))$/\r\n\r\n(7) mysql日期区间格式，总数查询\r\n\r\n(8) linux每天自动备份指定文件到指定目录下，\r\n\r\n(9) ajax异步，同步的区别, 应用场景\r\nasync:false为同步，\r\n同步：用户不能做任何操作，只能等待。直到有结果返回。\r\n异步：用户可以做任何操作，结果返回后，自动显示判断结果\r\n\r\n(10) 无限级分类的实现原理\r\n\r\n(11) 远程访问制定文件的两种方法\r\n\r\n->\r\na.$th = file_get_contents('http://www.yiqihd.com'); \r\nif($th){\r\nwhile(!feof($th)){\r\necho fgets($th);\r\n}\r\n}\r\n注：fopen()返回的只是一个资源，如果打开失败，本函数返回FALSE\r\n\r\nb.$th_2 = fopen('http://baidu.com');echo $th_2;\r\n\r\n注：file_get_contents()打开网页后，返回的是一个字符串，可以直接输出的\r\nc.curl\r\n\r\n(12) 介绍自己最得意的一个作品，如何与团队解决最难的问题的\r\n\r\n(13) 自己熟悉的一个开源框架，该框架采用什么设计模式，作者如何使用该框架的\r\n\r\n\r\n\r\n2015-04-18\r\n---------------\r\n开始回归!\r\n2015-04-14\r\n----------------\r\n这十来天不写代码，感觉手闲不住。有开始码农的生活了。\r\n2015-04-03\r\n-----------------\r\n出去走两天。到深圳的山上看看这个城市。\r\n2015-0330\r\n-----------------\r\n落下了两天。重新上路.\r\n\r\n20150326\r\n------------------\r\n什么是好的视图引擎？\r\n1.基于该引擎开发出的模板要更贴近标准的html等\r\n2.语法简单易懂\r\n3.良好的缓存机制\r\n4.扩展性好\r\n5.网络资源多\r\n\r\n20150325\r\n------------------\r\n(1)MVC\r\n\r\nM 从数据库取出数据\r\nV 直观看到的web页面\r\nC 向系统发送命令和工具\r\n\r\n(Model View Controllers)是一种软件设计典范， 用一种业务逻辑和数据显示分离的方法组织代码， 将业务逻辑聚集到一个部件里面，在界面和和用户围绕数据的交互能被改进和个性化定制的同时而不需要重新编写业务逻辑\r\n\r\nmvc 有利于业务分工\r\n\r\nmvc 有利于代码重用\r\n\r\nMVC 的运行原理\r\n\r\n第一： 浏览者 -> 调用控制器，发出指令\r\n\r\n第二： 控制器 -> 按指令选取一个合适的模型\r\n\r\n第三： 模型   -> 按控制器指令取相应数据\r\n\r\n第四： 控制器 -> 按指令选取相应视图\r\n\r\n第五： 视图   -> 把第三步取到的数据按用户想要的样子显示出来\r\n\r\n单一入口机制 index.php?xxx, 指在一个web应用程序中，所有的请求都指向一个脚本文件. 使维护更方便\r\n\r\n20150324\r\n------------------\r\n(1)\r\ndf 查看磁盘空间 df -lahHT\r\ndu 统计磁盘上的文件大小\r\n不加参数， 遍历当前文件夹所有文件夹目录\r\n\r\n-b 以byte为单位\r\n\r\n-k 以KB\r\n\r\n-m 以MB\r\n\r\n-h 按照1024进制以最合适的单位统计文件\r\n\r\n-h 按照1000进制以最合适的单位统计文件\r\n\r\n-s 制定统计目标\r\n\r\n\r\n(2) 分区\r\n第一 主分区和扩展分区总数不能超过四个\r\n\r\n第二 扩展分区最多只能有一个\r\n\r\n第三 扩展分区不能直接存取数据 (扩展分区内部划分逻辑分区才能存取数据)\r\n\r\n\r\n当硬盘空间消耗殆尽时怎么办？\r\n\r\n办法： \r\n在保留原硬盘的基础上，给服务器添加新的硬盘\r\n\r\n\r\n(3)必须对硬盘进行分区，格式化，挂载后才能使用\r\nfdisk  要加参数才起作用 , fsisk需要根用户权限\r\n-b\r\n-c\r\n-h\r\n-l\r\n.\r\n.\r\n.\r\n-H\r\n-s\r\nfdisk /dev/sdb   进入分区指令\r\n\r\n(4)分区模式之 MBR\r\n- 主分区不超过4个\r\n- 单个分区容量最大2TB\r\n\r\nGPT --> 逼格上的一个巨大的提升啊\r\n- 主分区个数几乎没有限制\r\n- 单个分区容量几乎没有限制\r\n\r\n1EB=1024PB, 1PB=1024TB, 1TB=1024GB\r\n18EB=18432PB = 18874368TB=19327352832GB\r\n\r\n(5)parted可以用于GPT分区, MBR分区， fdisk只能用户MBR分区\r\n\r\nsudo parted\r\n(parted)\r\nselect /dev/sdc\r\nmklabel gpt\r\nprint all #查看分区类型\r\n(6)分区的格式化\r\n分区格式化命令 mkfs\r\n主分区和逻辑分区才可以格式化\r\n\r\n(7)挂载命令 mount  \r\n默认挂载到mnt\r\n-> mount /dev/sdb1 /mnt/gitvim\r\n卸载 umount /mnt/gitvim\r\n自动挂载(开机自动挂载) vim + /etc/fstab\r\n(8) 添加swap交换分区\r\n第一， 建立一个普通的linux分区\r\n第二， 修改分区类型的16进制编码\r\n第三， 格式化交换分区\r\n第四， 启动交换分区\r\n\r\nfree 查看硬盘使用情况\r\n20150320\r\n-------------------\r\n(1)winSCP具有ftp一样的功能\r\n(2)ecshop 下载网盘路径: pan.baidu.com/s/1dDAJvZN\r\n\r\n语言都是相通的，JMeter是用java开发的\r\n\r\n(3)JMeter是apache组织开发的，模拟大并发的开源工具\r\n\r\n->  sampler  采样\r\n->  thread\r\n\r\n(4)JMeter.apache.org 下载\r\n20150318\r\n-------------------\r\nsysstat命令之IO监控 sar -b -f sa18\r\nsysstat命令之CPU监控 sar -B -f sa18\r\nsysstat命令之网络监控 sar -n DEV -f sa18\r\n评估磁盘读写性能极限 - 》 \r\nfio -filename=/data/test -direct=1 -iodepth 1 -thread =rw=randrw -ioengine=psync -bs=16k -size 2G -numjobs=10 -runtime=30 -group_reporting -name=mytest13\r\n性能测试工具简介： JMeter\r\n特性：  - web -HTTP, HTTPS\r\n- SOAP\r\n- FTP\r\n- LDAP\r\n- Message-oriented\r\n- MongoDB(NoSQL)\r\n- TCP\r\n-Others\r\n20150316\r\n--------------------\r\n要改变。\r\n\r\n20150314\r\n---------------------\r\n- sysstat\r\n\r\nsar 命令\r\nsar --help查看帮助\r\n\r\n例子 -> sar -q -f sa08\r\n-> sar -p -f sa25\r\n\r\nPRI(new) = PRI(old) + nice\r\n\r\n*** 2015-03-13\r\n\r\n\r\n负载测试(Load Test)\r\n- 为了验证系统设计符合正常业务负载情况下系统性能表现的测试\r\n压力测试（Stress Test）\r\n- 为了验证系统在极端负载情况下的性能表现的测试\r\n\r\n\r\n- 一台Centos服务器    \r\n\r\n- 一个可以链接服务器的工具putty\r\n\r\n-top命令查看进程\r\n*** 2015-03-12\r\n\r\n- 横向扩展的能力\r\n- 数据库的优化\r\n- 尽量让一台机器能够承载更多的用户请求\r\n\r\n\r\n性能测试概要\r\n性能测试相关工具介绍\r\n被测系统介绍\r\n使用Jmeter进行性能测试\r\n产品性能分析\r\n其他性能监控软件介绍\r\n\r\n(1)什么是性能测试\r\n性能测试就是通过技术的手段模拟大量用户同时访问被测应用，观察，记录，分析和系统有关的各项性能个过程。\r\n性能测试的目的是评估系统的性能瓶颈，预测系统的最大用户负载能力\r\n\r\n两个关键点\r\n模拟大量并发用户\r\n监控系统负载参数分析瓶颈\r\n\r\n性能指标\r\n(1)平均响应时间（TTLB, time to laster byte）\r\n\r\n\r\n- 平均每个请求从发送到接受响应的时\r\n\r\n\r\n合理的平均响应时间\r\n\r\n- 2/5/10原则\r\n\r\n- 2秒好， 5秒比较不错， 10秒失败\r\n\r\n- 1秒的页面家在延迟相当于少了11%的PV(page view)\r\n\r\n(2~5)为系统资源类的指标\r\n(2) CPU\r\n- CPU的占用率\r\n(3)内存\r\n- 内存的占用率， 换页数等\r\n(4) I/O\r\n- 读写请求数， 读写量\r\n\r\n(5) 带宽\r\n- 进站出站带宽占用率\r\n\r\n为什么要进行性能测试?\r\na.能够有效评估系统的性能指标，用于系统的性能测试\r\nb.能够识别系统的性能瓶颈，协助性能调优\r\nc.能够指导突发流量承载方案的制定\r\nd.能够用于系统运维成本的预算\r\n\r\n*** 2015-03-11\r\n\r\n=== PHP性能问题的具体分析\r\n工具:XHPorf(源自FaceBook的PHP性能呢分析工具)\r\n实践：\r\n通过分析Wordpress程序，进行分析\r\n\r\nphp.ini -> [xhprof] extension=xhprof.so; xhprof.output_dir=/tmp/xhprof\r\n\r\nxhprof_enable(XHPROF_FLAGG_CPU+XHPROF_FLAGS_MEMORY) 开启xhprof\r\n\r\n$data = xhprof_disable();\r\n\r\ninclude_once \"xhprof_lib/utils/xhprof_lib.php\";  \r\ninclude_once \"xhprof_lib/utils/xhprof_runs.php\";  \r\n$objXhprofRun = new XHProfRuns_Default();//数据会保存在php.ini中xhprof.output_dir设置的目录去中 \r\n\r\n=== PHP性能瓶颈解决方法\r\n做到极致\r\n(1) Opcode Cache: PHP扩展APC\r\n扩展实现：通过PHP扩展替代原php代码中高频逻辑\r\nRuntime优化，HHVM （smarty模板渲染可以用HHVM实现）\r\n\r\nsmarty caching 设置成true启用缓存机制\r\n\r\n重叠时间窗口思想\r\n串行：\r\nProcess1 -> Process2 -> Process3 -> Process4\r\n\r\n重叠时间窗口\r\nprocess1\r\nprocess2\r\nprocess3\r\nProcess4\r\n\r\n\r\n旁路方案\r\nX.php                               X.php\r\n>                                  >\r\nprocess1                        process1 \r\n>                                          >   process2\r\n>\r\nprocess2                        process3\r\n>                                   >     <\r\nprocess3                        process4\r\n>\r\nprocess4\r\n>\r\n*** 2015-03-10\r\n\r\n(1)PHP代码运行流程:\r\n×.ph -> Scanner-> Exprs ->  Parse -> Opcodes -> Exec -> Output\r\n(2)PHP语言级性能优化\r\n优化点：PHP内置函数的性nengyoulue\r\n\r\nisset > array_key_exists()\r\n\r\n(3) less use php magic function,减少使用魔术方法减少使用魔术方法\r\n\r\nlinux : time php test.php   -> can see the time of the file use\r\n(4)don't use  '@', 严格不使用'@'符号\r\nvld dumps all the opcodes\r\n(5) use unset free 及时释放变量\r\n(6) no calculate in a for (减少计算密集型业务，如大批量的日志分析，大批量数据量运算), php语言都需要装化成c处理，从这点上来说，phalcon是最快的php框架\r\nphp适合衔接webserver与后端服务，UI呈现.\r\n(7)务必使用带引号字符串做键值:PHP会将没有引号的键值当作常量，产生查找常量的开销\r\n\r\n---php周边都有什么 ？\r\n-> 硬件 \r\nlinux运行环境\r\n内存\r\n文件存储(硬盘读写读写) \r\n\r\n->软件\r\n数据库 DB\r\n\r\n->缓存(软硬radis, memcache)\r\n->网络\r\n\r\nDB.php  ~ 网络 + DB    php 是串行运行\r\n\r\n优化1:\r\n=== 减少文件类操作。\r\n常见PHP场景的开销：读写磁盘，读写数据库，读写内存，读写网络数据。\r\n速度比较： 读写内存 << 读写数据库(基于读写磁盘) < 读写磁盘 < 读写网络数据(也是读写磁盘, 网络有隐性因素，)\r\n\r\n读写内存是最快的。\r\n优化2：\r\n=== 优化网络请求\r\n\r\n网络请求的坑\r\n1.对方接口的不确定\r\n2.网络稳定性\r\n\r\n如何优化网络请求？\r\n\r\n1.设置请求时间  \r\na)链接超市 (不要超过200ms)\r\nb)读超时   (不要超过800ms)\r\nc)写超时   (不要超过500ms)\r\n\r\n2. 将串行请求并行化\r\na)使用curl_multi_*() \r\n取决于多个中间最慢的\r\nb)使用swoole扩展 (推荐)\r\n\r\n优化3 ： \r\n=== 压缩PHP接口输出\r\n如何压缩\r\n使用gzip输出\r\n压缩输出的利与弊\r\n利:利于数据输出，client端更快获取数据\r\n弊:额外的cpu开销\r\n优化4：\r\n=== 缓存重复计算内容\r\n什么情况下做输出内容的缓存？\r\n多次请求，内容不变情况\r\n\r\n流程 ： \r\nx.php -> Cache -> Nocache -> 计算，数据处理 -> cache -> chached\r\n\r\n*** 2015-03-09\r\n\r\n对未知的问题有一定的解决办法,说明自身的技术已经有所提高\r\nphp性能问题\r\n(1)项目中遇到问题了吗？\r\na.php语法使用的不恰当\r\nb.使用php语言做了它不擅长的事情\r\nc.php语言连接的服务不给力\r\nd.php自身的短板\r\ne.不知道的问题\r\n(2)在什么情况下遇到性能问题?\r\n(3)有什么靠谱的解决办法？\r\n\r\n(4)PHP的性能问题，占整体项目性能的比例不大，性能优化，不应该仅仅局限在php的优化上。\r\na.php语法级的性能优化(易)\r\nb.PHP周边问题的性能优化(前有服务器如apache，后有数据库如mysql)(中)\r\nc.PHP语言自身分析，优化(难)\r\n\r\n\r\n压力测试工具\r\napache benchmark(ab)(linux下)\r\n./ab -n1000   -c100 http://www.baidu.com\r\n-n请求数 -c 并发数 url目标压测地址\r\n\r\n(a).提高每秒请求次数(Request per second); 优化到每次请求越多越好\r\n(b).平均处理一个请求的时间(time per request). 优化到越小越好\r\n\r\nPHP语言及级性能优化\r\n性能问题：\r\n自写代码冗余，可读性不佳，并且性能低\r\n\r\n为什么性能低？\r\nPHP代码需要编译解析为底层语言，这一过程每次请求都会处理一次，开销大\r\n好方法：\r\n多使用PHP内置变量，常量，函数\r\n\r\n*** 2015-03-08\r\n\r\n东西多了，得分清急所，大场。\r\n\r\n*** 2015-03-04\r\n\r\n新的一天来了，哈哈\r\n\r\n*** 2015-03-02\r\n\r\n经理既然快辞职，那我得把dob2b的精华学一下。\r\n\r\n*** 2015-02-10\r\n\r\n(1)通信数据标准格式： code状态码, message,data\r\n(2)json格式封装数据\r\n(3)php生成xml数据\r\n(a)组装字符串\r\n(b)使用系统类\r\n1) DomDocument\r\n2) XMLWrite\r\n3) SimpleXML\r\n\r\nxml节点不能是数字//<0>4</0>\r\n\r\n(4)混合封装json/xml格式数据格式\r\n\r\n(5)缓存技术\r\na.静态缓存\r\nb.memecer\r\nc.redis\r\n\r\nphp生成缓存，获取缓存，删除缓存\r\n*** 2015-02-09\r\n\r\nphp面向对象 \r\napp\r\n\r\n*** 2015-02-06\r\n\r\n还是差太多啊。真的应该出自己的产品。\r\n\r\n*** 2015-02-03\r\n\r\nshow variables like \"%log%\";\r\n开启慢查询日志：\r\nset global show_query_log=on;\r\nshow variables like  \"%slow%\";\r\n\r\n*** 2015-02-02\r\n\r\n(1)总是朋友们帮我，当朋友有难时，我半点忙也帮不上。\r\n\r\n*** 2015-01-26\r\n\r\n貌似今天工作比较顺利，很快就把壹起网的任务完成了。明天就可以开始手机板块了。争取年底前把大部分的工作完成掉。年后接新的项目。明年要做新的技术项目。把git和phalcon真正用到项目上。\r\nPhalcon比laravel的性能还要高出十倍。\r\n\r\n*** 2015-01-24\r\n\r\n对于php来说，了解它的运行机制，有助于我们写出高效健壮的代码，会更清楚程序的代码到底该怎么去写，如果是做php扩展，那了解它的运行机制就更是必须的了。\r\n+ 运行环境：LAMP的A、M、P是如何互通工作的？\r\n  - L：Linux/Windows（OS）\r\n  - A：Apache（server）\r\n  - M：Mysql（DB）\r\n  - P：PHP\r\n  - 1) 分别安装Apache、Mysql、PHP\r\n  - 2) PHP和DB的互通：修改php配置文件php.ini，“;extension=php_mysql.dll”把冒号去掉，这样php就可以支持mysql数据库了\r\n  - 3) Server和PHP的互通：修改apache的配置文件httpd.conf，在LoadModule配置块添加LoadModule php5_module d:\\php5\\php5Apache2_2.dll”；添加希望Apache服务器能够识别的PHP扩展名“AddType application/x-httpd-php .php”；默认显示页“DirectoryIndex index.html index.php”；修改apache端口号“Listen 82”\r\n前两相配置就是告诉apache server，以后收到的Url用户请求，凡是以php作为后缀，就需要调用php5_module模块进行处理。\r\n\r\n+ PHP运行过程简介\r\n  - PHP总共有三个模块：内核、Zend引擎、扩展层。\r\n    1) PHP内核用来处理请求、文件流、错误处理等相关操作；\r\n    2) zend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；\r\n    3) 扩展层是一组函数、类库和流，PHP使用它们来执行一些特定的操作，比如：我们需要mysql扩展来连接mysql数据库；\r\n  - 当ZE执行程序时可能会需要连接若干扩展，这时ZE将控制权交给扩展，等处理完特定任务后再返还；最后，ZE将程序运行结果返回给PHP内核，它再将结果传送给SAPI层（服务器应用程序编程接口），最终输出到浏览器上。 简单来说，整个运行过程即： 启动apache，PHP解释程序也随之启动； 其中php的启动主要包括两部分\r\n    1） 初始化一些环境变量，这将在整个SAPI生命周期中发生作用。PHP调用各个扩展（php.ini文件中打开的扩展）的MINIT方法（MINIT的意思是模块初始化，各个模块都定义了一组函数、类库等用以处理其他请求），从而使这些扩展切换到可用状态\r\n    2） 生成只针对当前请求的一些变量设置。当一个页面请求发生时，SAPI层将控制权交给PHP层，于是php设置了用于回复本次请求所需的环境变量，同时，它还建立一个变量表，用来存放执行过程中产生的变量名和值；PHP调用各个模块的RINIT方法，即“请求初始化”，一个经典的例子是session模块的RINIT，如果在php.ini中启用了session模块，那在调用该模块的RINIT时就会初始化$_SESSION变量，并将相关内容读入。2． PHP关闭\r\n  - 关闭也分两步\r\n    1） 一旦页面执行完毕（无论是执行到了文件末尾还是用exit或die函数终止），php就会启动清理程序，它会按顺序调用各个模块的RSHUTDOWN方法，RSHUTDOWN用以清除程序运行时产生的符号表，也就是对每个变量调用unset函数。\r\n    2） PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会。这样，整个PHP生命周期就结束了。\r\n+ PHP运行机制\r\n  - 首先，讲一下apache，它是目前使用最为广泛的一种web server，优点是跨平台、高效和稳定，缺点是越来越重\r\n  - Apache组件逻辑, Apache是基于模块化设计的，总体上看起来代码的可读性高于php的代码，它的核心代码并不多，大多数的功能都被分散到各个模块中，各个模块在系统启动的时候按需载入。\r\n    1) MPM：Multi -Processing Modules，多重处理模块，是Apache的核心组件之一，Apache通过MPM来使用操作系统的资源，对进程和线程池进行管理。最常用的是prefork和worker。\r\n    2) APR：Apache portable Runtime Library，即Apache可移植运行库，它是一个对操作系统调用的抽象库，用来实现Apache内部组件对操作系统的使用，提高系统的可移植性。\r\n    3) Php module：Apache对于php的解析，就是通过众多Module中的php Module来完成的。\r\n+ 启动阶段\r\n  - 在这个阶段，Apache为了获得系统资源最大的使用权限，将以特权用户root（X系统）或超级管理员administrator(Windows系统)完成启动。\r\n\r\n+ 运行阶段\r\n  - 在运行阶段，Apache主要工作是处理用户的服务请求。\r\n  - 这个阶段，Apache放弃特权用户级别，使用普通权限，这主要是基于安全性的考虑，防止由于代码的缺陷引起的安全漏洞。\r\n  - Apache将请求处理循环分为11个阶段,\r\n  - 这里，讲一个比较重要的概念，apache的Hook机制，是指Apache 允许模块(包括内部模块和外部模块，例如mod_php5.so,mod_perl.so等)将自定义的函数注入到请求处理循环中。换句话说，模块可以在Apache的任何一个处理阶段中挂接(Hook)上自己的处理函数，从而参与Apache的请求处理过程。\r\n  关于Hook机制在Windows系统开发也经常遇到，在Windows开发既有系统级的钩子，又有应用级的钩子。常见的翻译软件（例如金山词霸等等）的屏幕取词功能，大多数是通过安装系统级钩子函数完成的，将自定义函数替换gdi32.dll中的屏幕输出的绘制函数。\r\n\r\n*** 2015-01-23\r\nPhalcon是目前所有的php框架中最快的。没有之一。c扩展.\r\nStudy_Note\r\n学习的经历，经验\r\n\r\n*** 2014-12-07\r\n大丈夫能伸能屈。最近有点忙。经常到三更半夜的。但不能停下来不走。要继续。\r\n\r\n*** 2014-12-14 \r\n有趣\r\n围棋和编程存在一个很有趣的共通点:)都讲究计算式思维。我在这方面还很不足。\r\n所以，我有空多下棋，对编程是有很大的帮助的。Ok，就这么愉快的决定了。\r\n+ 什么是知识。\r\n  a.陈述式知识;\r\n  b.过程式知识。\r\n+ 计算机的核心是：\r\n  在一些基本指令上建立程序实现目的理念，然后才是一系列控制流。\r\n+ 程序的内涵\r\n  就是一系列指令。\r\n+ 正确的指令\r\n  六条基本的指令就可以主宰世界。\r\n  一种语言能行的，另一种语言也可以。语言没有最好的，只有更好的。语言只是一种表单思想的工具。我对vim投入过于执着了。\r\n+\r\n  a.高级语言;\r\n  b.广泛型应用还是特定型应用;\r\n  c.解释型语言，编译型语言\r\n+ 在碰到问题是，将问题细化成计算步骤，转化成计算机能够执行的一串指令\r\n+对于一门语言，要了解它的基本组成部分，语法，语义。\r\n  静态语义：表示什么程序是有意义的。\r\n  完整语义：运行程序会产生什么样的结果。\r\n  注册了百度云域名，空间，正在准备备案材料。等备案下来，我的Laravel框架写的自己的博客也就开始上线了。以后代码放github托管，页面和数据就放自己的网站上。\r\n  问题是：我的网站应该做一些什么样的事情呢？难道只是博客？这不是我的初衷。\r\n  我应该让我的网站变得更有意义。\r\n*** 2014-12-15 \r\n胜\r\n从来没有轻易的胜利。人天生对自己劳动所得报有一种希望。一切还是回归自然些好吧。\r\n问题终究可以解决，但有的时间要长一些，有的短一些。就是这样。\r\n我能解决很多问题。但时间上不允许我有解决所有问题的可能。得失的因果决定了我必须进行取舍。\r\n今年这么多人结婚，我去哪里？都去不了啊。没钱，没时间，咋去？\r\n想想就紧张。也不知道这些同学都过的咋么样了？你们过的可还好？那些年，我走过的路，遇上的人，第一吃的东西，第一次旅行经过的地方，都一一记在脑海里。这辈子都记得（老年痴呆除外。。。。。。）。好了，00：06了，要睡觉了。明天还有三个项目接着搞。年底前，技术上应该有一个质的飞跃。\r\n*** 2014-12-18 \r\n坑\r\n有些东西，一旦不去动，就没了。每接触一个技术，就会很多感想：人的这辈子太短了。学不完的。要是多些时间，该多爽？\r\n很想把很多代码都学一下。可惜。\r\n*** 2014-12-19 \r\n国内翻译的东西，东一块，西一块。要么就是断章取义。能秒懂的人又不屑于浪费时间在解读上面。还是得自己英语过关。英语好的，学起程序那可真的是爽～\r\n*** 2014-12-21\r\n围棋无时无刻不在追求，下一手去哪儿。不知道下一手去哪儿，很危险！一步之差，缪以千里。妙哉！\r\n*** 2014-12-22\r\n<<那山,那人，那狗>>电影的音乐真好听, 刘烨和陈好的处女作。体现湘西邮政的电影。很好看。很有意境。父子和一条狗。湘西真漂亮～\r\n不兴自己喊苦。这话精辟。\r\n这电影里的稻田让我想起了小时候收稻谷的情景。中国人是接地气的。\r\n*** 2014-12-25\r\n秦时明月更新到君临天下了～哈哈哈～帅呆了～，今天火车票没买到。南广高铁通车，两广的经济将产生质的飞跃。\r\n*** 2014-12-29\r\nPHPer要掌握哪些技术才能破万工资\r\n+ WEB开发语言<前后端>：PHP、HTML、JavaScript、CSS。\r\n+ 服务器：Linux安装、LANMP环境搭建<apache和nginx>、SVN安装与配置、git安装与使用、cacti安装与使用、memcache安装与使用、 redis安装与使用、常用命令使用<查找、正则>、Linux安全配置。\r\n+ 数据库：MySQL、MongoDB。懂得分库、分表的应用场景。以及MySQL索引优化、分区、各种引擎适应场景。MongoDB工作原理，优劣场景。\r\n+ 设计模式：单例、工厂、策略、委托、代理等常用模式要熟悉使用。\r\n+ 排除算法：冒泡排序、快速排序、选择排序、归并排序。\r\n+ 计算机原理：分时分片、进程、线程、IO、内存。掌握这些，可以帮助理解设计语言和系统瓶颈。\r\n+ 源码分析：Discuz、PHPCMS v9、Wordpress、typecho、Ucenter原理。\r\n+ WEB安全：SQL注入、XSS、CSRF等常见安全防御。\r\n+ 熟悉各种开源技术：二维码、缩略图生成等。多多益善。\r\n+ 大数据与并发。这个是亮点，也是进入架构层面的基石。薪资是否破万与此直接相关。\r\n+ 前端技术：JQuery、bootstrap等。\r\n+ 代码规范、文档齐全，会制作演示PPT，流程图软件<亿图图示专家或Axure RP>。\r\n+ 掌握MVC模式及框架<LARAVEL、ZendFramework、CI、Yii、ThinkPHP、Yaf>。\r\n\r\n*** 2015-01-01\r\n\"走不出去的路不是路。路为所有人开放着，但不是所有人都能走那条路。\"\r\n\r\n*** 2015-01-04\r\n荡尽浮华。尽留坚实。laravel,是让我真正喜欢上php的原因。相比之下，Ruby,Python比php更高雅。\r\n\r\n*** 2015-01-09\r\nsymfony框架也是相当犀利！\r\n韩红的歌，牛。\r\n\r\n*** 2015-01-16\r\n搭建一个千万用户级的网站：\r\n横向扩展的能力\r\n数据库的优化\r\n尽量让一台机器能够承载更多的用户请求\r\n\r\n# test sed command\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}