#+TODO: TODO IN_PROGRESS WAITING DONE 
** 2016 Books Lists
*** profession books lists
| name                                               | brief | core ideas                   | time                  | book review                   |
|----------------------------------------------------+-------+------------------------------+-----------------------+-------------------------------|
| Hacker And Painter                                 | emacs | freedom                      | 2016-06-05            | emacs is a super power editor |
| Pratical Common Lisp                               | Lisp  | freedom                      | 2016-06-30~           | english is important          |
|----------------------------------------------------+-------+------------------------------+-----------------------+-------------------------------|
| The Pragmatic Programmer:From Journeyman to Master | -     | how to become a master coder | 2017-03-05~2017-03-30 |need read much times    |

*** DONE 1. 提早六小时下班的高效工作术 (2015-10-19)
*** DONE 2. 效率是整理出来的(2015-10-20)
*** DONE 3. 秦时明月五万里长城(2015-10-21)
*** DONE 4. 零压力工作法(2015-10-2
*** DONE 5. 内心强大的力量(读尼采哲理2015-10-22)
    + 内心强大很重要. 
*** DONE 6. 秦时明月六焚书坑儒(2015-10-23)
    + 读小说, 和看视频是两种体验.视频是经过再创作的过程.有的小说比视频好看, 而有的视频比原著精彩. 雨和彩虹各有各的精彩. 一个是诗, 一个是远方.
*** DONE 7. 优秀员工的良好工作习惯(2015-10-23)
	  + 认真的习惯
*** DONE 8. 内心强大的力量(2015-10-24, 看完)
*** DONE 9. 优秀员工的良好工作习惯(2015-10-24)
*** DONE 10. 5个图表解决工作中的12大难题(2015-10-24)
	  + notice:  用五种图-> 
			- 流程图,
      - 圆饼图,
      - 树形图,
      - 点图,
      - 行列图
*** DONE 11. 高效程序员的45个习惯(敏捷开发修炼之道) (2015-11-05)
	  + 不管路走了多远,错了就要重新返回. -- 土耳其谚语
*** DONE 12. 《黑客与画家》(2016-01-16)
	  + 对Lisp语言，以及编程语言有着非常独到的见解,是一本像孙子兵法那样的书籍
*** IN_PROGRESS [#B] 13.  开始看Pratical Common Lisp (all English, a big challenge)
*** DONE 14. 《尼采内心的八度定律》 
      + 一切从了解自己开始， 找到自己的价值；
      + 爱自己， 新鲜，充实自己；
      + 坚持自己的梦想
      + 承认自己的局限，不断进步；
      + 历练磨难，凝聚力量；
      + 坦然面对迷惑，坚持自己的判断；
      + 每天克制自己的一件小事，自制； 
      + 每天进步一点点。 
*** DONE 15. 《坂田攻击法》　剃刀手，电子计算机。攻击前，一定要选准要害。  
*** DONE [#A] 16.《Web 安全深度剖析》 安全漏洞，攻防测试。 
    CLOSED: [2016-06-16 Thu 15:54]
*** IN_PROGRESS [#A] 17. C程序设计（第4版）
*** DONE [#A] 18. python绝技:运用python成为顶级黑客
*** IN_PROGRESS [#B] 19. 玄玄棋经
*** 20. 遥远的救世主 
        + 文化属性
        + 透视社会依次有三个层次 *技术，制度和文化。小到一个人，大到一个国家一个民族，任何一种命运归根到底都是那种文化属性的产物。强势文化造就强者，弱势文化造就弱者，这就是规律，也可以理解为天道，不以人的意志为转移* 。

        + 强势文化就是遵循事物规律的文化，弱势文化就是依赖强者的道德期望破格获取的文化，就是期望救世主的文化。强势文化在武学上被称为“秘籍”, 而弱势文化由于易学、易懂、易用，成了流行品种。

        + 比如说文化产业，文学、影视是扒拉灵魂的艺术，如果文学、影视的创作能破解更高思维空间的文化密码，那么它的功效就是启迪人的觉悟、震撼人的灵魂，这就是众生所需，就是功德、市场、名利，精神拯救的暴利与毒品麻醉的暴利完全等值，而且不必像贩毒那样耍花招，没有心理成本和法律风险。 

        + 没有主，主义、主意从哪里来？主无处不在，简单地说， *支配人的价值取舍行为的那个东西就是主，就是文化属性* 。
        + 文明对于不能以人字来界定的人无能为力。
        + 死马当做活马医，再糟，死马还能再死一回吗？

        + 股票的暴利并不产生与生产经营，而是产生与股票市场本身的投机性。它的运作动力是：把你口袋里的钱装到我的口袋里去。它的规则是：把大多数羊的肉填到极少数狼的嘴里。
        + 法律机器的运作不以口供为条件。法律对程序和内容要求极限的严谨。

        + 强盗的逻辑，直接获取，冒险，刺激。
        + 强盗的本质是破格获取，破格获取和直接获取是两个不同的概念。你们没有自信与强者在同一个规则下公平竞争，这只能说明你是弱者，因为弱者文化所追求的最高价值就是破格获取。所以，强盗的逻辑从本质上讲是最懦弱的生存哲学。

        + 拯救灵魂是《圣经》的买卖。
        + 《圣经》的理由是：因信着得救了，上天堂；因不信有罪了，下地狱。用这种哄孩子的、吓汉子的方法让人去信，虽有利于基督教的实践，却也迎合了人的怕死的一面、贪婪的一面。这样的因果关系已经不给人以自觉、自省的机会，人连追求高尚的机会都没有，又何以高尚呢？

        + 神是什么？神是根据人的需要造出来的。（容我仿一下：鬼是什么？鬼是根据人的恐惧造出来的。）

        + 《圣经》神学是关于人类精神的学说，是关于人的灵魂净化、升华，人的行为高尚、正典的学说。一味地攻击或捍卫神的真实性与否，都是愚昧的表现。前者没有理解基督教的历史价值和社会价值，后者没有理解基督教的真正境界。
        + 神是什么？  *神即道，道法自然，如来*  。
        + *你不知道你，所以你是你，如果你知道了你，你就不是你了。*
        + 这世上原本就没什么神话，所谓的神话不过是常人的思维所不易理解的平常事。
        + 无论做什么，市场都不是一块无限大的蛋糕。神话的实质就是强力作用的杀富济贫。这就可能产生两个问题，一是杀富是不是破坏性开采市场资源？二是让井底的人扒着井沿看了一眼再掉下去是不是让他患上精神绝症。
        + 佛家常说“证到”这个词，却从来不告诉你“证到”后面是什么，因为欲说欲解都不能，因为条件的条件的条件，因为因果的因果的因果，所以就有了如人饮水冷暖自知。
        + 这就是圆融世故，不显山不露水，各得其所。可品性这东西，今天缺个角、明天裂道缝，也就离塌陷不远了。
        + 社会对公司的好感也是商业好处的一部分。这不是道德境界问题，是市场生存的法则问题。这种好感不仅仅是我们强行摊派价值观，也不仅仅是腐蚀我们自身的竞争力，更说明我们不是靠产品征服市场而是靠作秀混迹市场，这种违背商业属性的人文评价最终将葬送这个公司。
        + 生存法则很简单，就是忍人所不能人，能人所不能。忍是一条线，能是一条线，两者的间距就是生存机会。如果我们忍人所不忍，能人所不能，咱们就比别人多了一些生存机会。市场的生存竞争非常残酷，胜负往往就在毫厘之间, *两败俱伤你比他多一口气，你就是赢家* 。（暗合围棋屠龙对杀）
        + 扬长避短，拾遗补缺，学会夹缝里面求生存。
        + 公司必须以不断开拓市场和完善服务来抵御市场风险。
        + 翻开历史看看，你从哪一行哪一页能找到救世主救世的记录。没有，从来就没有，从来都是救人的被救了，被救的救了人。如果一定要讲救世主的话，那么符合和代表客观规律的文化就是救世主。
        + 扶贫的本质在一个扶字，如果你压根就没有打算自己站起来，老天爷来了都没用。
        + 法无定法，存在决定意识。
        + 《悟》
         - 悟道休言天命，
         - 修行勿取真经。
         - 一悲一喜一枯荣，
         - 哪个前生注定？
         - 袈裟本无清净，
         - 红尘不染性空。
         - 幽幽古刹千年钟，
         - 都是痴人说梦。
          
        + 所谓真经，就是能够打到寂空涅槃的究竟法门，可悟不可修。修为成佛，在求。悟为明性，在知。修行以行制性，悟道以性施行，觉者由心生律，修者以律制心。不落恶果者有信无证，住因住果，住念住心，如是生灭。不昧因果者无住而住，无欲无不欲，无戒无不戒, 如是涅槃。

        + 佛乃觉性，非人，人人都有觉性不等于觉性就是人。人相可坏，觉性无生无灭，即觉即显,即障即尘弊，无障不显，了障涅槃。觉行圆满之佛乃佛教人像之佛，圆满即止，既非无量。若佛有量，即非阿弥陀佛。佛法无量即觉行无量，无圆无不圆，无满无不满，亦无是名究竟圆满。佛教以次第而分，从精深处说是得道天成的道法，道法如来不可思议，即非文化。从浅义处说是导人向善的教义，善恶本有人相、我相、众生相，即是文化。从众生处说是以贪治贪、以幻制幻的善巧，虽不灭败坏下流，却无碍抚慰灵魂的慈悲。

        + 坐，请坐，请上座。茶，上茶，上好茶。
        + 投石击水，不起浪花也泛涟漪，妙在以扶贫而命题。当有识之士骂你比强盗还坏的时候，责骂者，责即为诊，诊而不医，无异于断为绝症，非仁人志士所为，也背不起这更大的骂名。故而，责必论道。

        + 传统观念的死结就在一个 *靠* 字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩。。。。。。总之靠什么都行，就是别靠自己。这是一个沉积了几千年的文化属性的问题，非几次新文化运动就能开悟。
        + *大爱不爱*
        + 弱势得救之道，也有也没有。没有竞争的社会就没有活力，而竞争必然会产生贫富、等级，此乃天道，乃社会进步的必然代价。无弱，强焉在？一个 *强*　字，　弱已经在其中了。故而，佛度心苦，修的是一个平常心。
        + *释、道、儒* 是中国传统文化的三大体系。传统文化毕竟是以皇恩浩荡为先决条件的文化，讲的都是 *皆空、无为、中庸* 的理，以抑制个性而求生求解。
        + 没有地狱，天堂焉在？总得有人在地狱呆着，咱们就算上一个，不然天堂就没有着落了。
        + 天下之道论到极致，百姓的柴米油盐。人生冷暖论到极致，男人女人的一个 *情* 字。
        + 佛说 *看山是山，看水是水* ，我只是依佛法如实观照，看摩登女郎是摩登女郎，看红颜知己是红颜知己。
        + 栏内是净，栏外是土，靠着栏杆就能抽烟。
        + 有人、有枪、有地盘，还愁没有番号吗？
        + *骆驼穿针* 的天堂(？没理解)
        + 你信神吗？ *了妄唯真* 即是神（了妄唯真?）了妄唯真,那神和人是什么关系？　不一不异
        + 旅游就是意图，开阔眼界、增长见识就是意图。
        + 想到了就做，该拿的拿该放的放，自性作为不昧因果。
        + 从现象参到制度、参到文化，因为任何一种命运，归根到底都是那种文化的产物。
        + 衡量一种文化属性不是看它沉淀的时间长短，而是看它与客观规律的距离远近。五千年的文化是光辉、是灿烂，这个没有问题，但是，传统和习俗得过过客观规律的筛子。
        + 有文化和有什么文化不是一个概念。
        + 不该作为的不作为就是作为，能活个明白就不错了。
        + 好声本身的魅力已经足够了，不在需要无谓的修饰和点缀。
        + 如果我的能力只能让我穷困潦倒，那穷困潦倒就是我的价值。
        + 每个人的立场、观念、心态和思维模式不一样，获取的信息量和解读信息的方式也不一样。
        + 好听就是艺术，只是每个人的好听标准不一样。
        + 能做到 *实事求是* 的就是神话。能说老实话，能办老实事的人就是神。
        + 神就是道，道就是规律, 规律如来，容不得你思议，按规律办事的人就是什么。
        + 人从根本上只面对两个问题： *一是生存，得活下来；二是得回答生命价值的问题，让心有个安住* 。
        + 5年之后我不嫌你老，你就可以不老了吗？５年以后我变成了一个色狼，值得你回头看一眼吗?
        + 不以求职应聘为生。要学位意义不大，应该什么有用学什么。
        + 不管是文化艺术还是生存艺术，有道无术，术尚可求也。有术无道，止于术。
        + *立志要高，挖掘要深。*
        + 外国不是我们家的厨房，不是我想进就进。有钱的男人也不是菜市场里的鸡蛋，不是我想抓一个就抓一个。
        + 马太效应： *你有，给你更多；你没有，把你原来的都拿走*
        + 当人一旦从危险里跳出来，他就不再去关注这个事物的危险了，他的目光就会全部落在这个事物的利益人上，这就是人。
*** 21. 中的精神 
        + 棋无止境，艺无止境，学无止境，各行各业追求的精神都是相通的，达到这样一个境界的人， *专注修为* ，一定会有所成就。
        + 对于自传或回忆录的作者来说，首先必须面对的，是诗与真的旋蒸，自我与世界的互动，还有遗忘与创造之间的平衡。
        + 反复争棋的最后目的，是从中领悟建立圆满调和的道。
        + 人的思想有三种变形，由忍辱负重的骆驼，到英勇搏击的雄狮，再到天真游戏的儿童。
        + 小时候的教育如同一颗智慧的种子，深埋在吴老师心灵的土壤里，经过这么多年的灌溉培育，那一粒种子已悄然地长成一棵枝叶茂盛的大树。
        + 中和了棋盘上各个子的作用的那一点，就是 *正着* 。 
        + 无论输赢，只要下出了最善的一手，那就是成功的一局。
        + *《三字经》* 写的是人间的根本。《大学》讲的是政治的根本。
        + 围棋不会出现两局完全相同的形状，所以每盘棋都应该重视，认真下。
        + 任何事物都是 *自然* 的。
        + 每逢遇到问题，他会从很多方面去研究，直至自己能够理解，弄清楚其中的道理为止。
        + 比起木谷先生培养了众多的后辈棋手来，我更想把围棋推向世界。(从这个里面可以看出，为什么日本最后 *六超* 之后，再也没有达到过世界前沿。)
        + *21世纪的围棋* , 简而言之就是“ *从棋盘的整体去考虑* ”。围棋一般分序盘、中盘、官子几个阶段来进行思考的，但我想，应该是从整体上去思考。(按整体去思考，我余下的人生应该怎样度过？)
        + *所谓最佳一手，指的是棋子下在某个位置上，之后棋力相等的棋手无论怎样去继续，那手棋始终处于有利于全局的位置。２１世纪的围棋也要继续变化下去* 。 
        + *一阳來夏，复旦天心* 。
        + 像季节轮回那样，世界也是盛衰轮回，一旦衰之极也会复苏过来，这是自然的形态。
        + 围棋的目标不是局限于边角，而是应该很好地保持 *全体的平衡* ，站在一个很高的角度去看待。（所以，学习python, lisp, emacs, vim, php源码, 读书，下棋，游泳，爬山，旅游并不是浪费时间。而是站在一个相对平衡的角度思考人生，实践求证 ）
        + *棋盘即是宇宙* 。
        + 阴阳思想的最高境界是阴和阳的中和，所以围棋的目标也应该是中和。只有发挥出棋盘上所有棋子的效率那一手才是最佳的一手，那就是中和的意思。每一手必须是考虑全盘整体的平衡去下。－－这就是 *六合围棋*
        + 所有有形的东西都是变化的。
        + 创造围棋进步的是安定的精神动力。
        + *中* 是取得阴阳平衡的一点，是最佳的意思。
        + 过多以物质为中心，是会失去内省的。人的内心的 *平衡* 是不可或缺的。

** 2017 Year Books
*** IN_PROGRESS 22. 官子大全 
*** IN_PROGRESS [#A] 23. 乌合之众(推荐)
*** IN_PROGRESS [#B] 24. 哲学家都做了些什么
*** IN_PROGRESS [#A] 25. 失控 (这本强烈推荐)
**** 自我能动
     + 有机体既是它自己的因也是它自己的果，既是它自己固有的秩序和组织的因，也是其固有秩序和组织的果。
     + 每一个自我都是一个同义反复：自明、自指、以自己为中心并且自己创造自己。
     + 一个系统，就是任何一种能够自说自话的东西。
     + 自动控制三个阶段
       - 由蒸汽机所引发的能量控制的第一阶段
       - 对物质的精确控制是第二阶段
       - 对信息本身的控制是第三阶段
     + 21 世纪的核心事件，是对信息的颠覆。
     + 自动化的历史，就是一条从人类控制到自动控制的单向通道。其结果就是从人类的自我到第二类自我的不可逆转的转移。而第二类自我是在我们控制之外的，是失控的。
     + 具有自我适应能力、像自己的目标进化、不受人类监管自行成长的机器，将会是下一个巨大的技术进步。要想获得有智能的控制，唯一的办法就是给机器自由。
     + 有些事必须先做，而且要按正确的次序去做。
     + 复杂的机器必定是逐步地，而且往往是间接地完善的。别指望通过一次华丽的组装就能完成整个工作正常的机械系统。你必须首先制作一个可运行的系统，再以此为平台研制你真正想完成的系统。
*** DONE [#B] 26. <三体>三部曲
*** IN_PROGRESS 27. 《如何读懂音乐》(2017-02-22)
*** IN_PROGRESS 28.《程序员修炼之道－－从小工到专家》(2017-02-26)
      + 能不能让正确的原则指导正确的行动本身，其实就是区分是否高手的一个显著标志。
      + 编程是一种技艺，一种需要 *用心学习的技艺* 。
      + 不应该局限于任何限定的技术，而是应该拥有足够广博的背景和经验基础，以让你能在特定情况下选择好的解决方案。你的背景源自于对计算机科学的基本原理的理解，而你的经验来自广泛的实际项目。
      + 注重实效的程序员不仅要完成工作，而且要完成得漂亮。
      + 软件构造应该是工程学科。但是，并不排斥个人的技艺。
      + 我们, 采集的只是石头，却必须时刻展望未来的大教堂。--采石工人的信条
      + 不间断的思考，实时地批判你的工作。
      + 在一个项目的总体结构中，总有个性和技艺的位置。
      + *注重实效* 的哲学
      + 越出直接的问题去思考，总是设法把问题放在更大的语境中，总是设法注意更大的图景。
      + 对自己做的每件事情 *负责* 。
      + 在所有弱电中，最大的弱点就是害怕暴露弱点。
      + 一扇破窗户，只要有那么一段时间不修理，就会渐渐给建筑的居民带来一种废弃感。
      + 要持续不断地观察周围发生变化的事情，而不只是你自己在做的事情。
      + 不要因为过度修饰和过于求精而毁损完好的程序。
      + 是否在某个项目中使用这些技术，或者是否把它们放入你的简历，这并不重要。学习的过程将扩展你的思维，使你向着新的可能性和新的做事方式扩展。
      + 所有阅读和研究都需呀时间，而时间已经很短缺。所以你需要预先规划。让自己在空闲的片刻时间里总有东西可读。
      + 批判地思考你读到的和听到的。不要受到供应商或者媒体炒作的影响。
      + 编码
        - 让你的代码保持解耦
        - 避免使用全局数据
        - 避免编写相似的函数
      + 养成不断地 *批判* 对待自己的代码的习惯。寻找任何重新进行组织、以改善其结构和正交性的机会。
      + 要实现某种东西，总有不止一种方式，而且通常有不止一家供应商可以提供第三方产品。
      + 如果某个想法是你唯一的想法，再没有什么比这更危险的事情了。
      + *如果你看到马蹄印，要想到马，而不是斑马* 。
      + 注重实效的程序员，连自己的代码也不信任。（注意这里不是不自信)没有人能编写完美的代码，针对自己的错误进行防卫性的编码。构建代码、对资源确实得到了适当释放进行实际检查。
      + 当每个人都确实要对你不利时，偏执就是一个好主意。 -- Woody Allen
      + 没有什么比常识和坦率更让人感到惊讶。
      + 死程序，不说谎。
      + 如果有一个错误，就说明非常、非常糟糕的事情已经发生了。
      + 不要用断言代替真正的错误处理。断言检查的是决不应该发生的事情。
      + 只要在编程，我们都要管理资源：内存、事务、线程、文件、定时器－－所有数量有限的事物。大多数时候，资源使用遵循一种可预测的模式：分配资源，使用它，然后解除其分配。
      + 保持灵活
        - 少些代码
        - 降低耦合
        - 数据模型(model)和模型的视图(view)分离
        - 提供一个“聚会地点”，　各模块之间可以在那里匿名和异步地交换数据。
      + 好篱笆促成好邻居。
      + 切断最小组织单位之间的交往能保护每一个人。把代码组织成 *最小组织单位* （模块），并限制它们之间的交互。随后出于折中必须替换某个模块，其他模块仍能继续工作。
      + 为并发进行设计。
      + 不要写渡渡鸟代码。
      + 为一般情况写程序，把具体情况放在别处。
      + 动态配置。
      + 再多的天才也无法胜过对细节的专注。
      + 注重 *实效的程序员* 几乎每天都要使用：估计算法使用的资源--时间、处理器、内存，and so on.
      + 需要在选择适当算法时注重实效--最快的算法对于你的工作并非总是最好的。
      + 每个开发者都应该有 *设计与分析算法的才能* 。
      + 重写、重做和重新架构代码合起来，称为 *重构* 。重构是意向需要慎重、深思熟虑、小心进行的活动。进行利大于弊的重构：
        - 不要试图在重构的同时增加新功能。
        - 在开始重构之前，确保你拥有良好的测试。
        - 采取短小、深思熟虑的步骤。
      + 找出用户为何要做特定事情的原因、而不只是他们目前做这件事情的方式，这很重要。到最后，你的开发必须解决他们的商业问题，而不只是满足他们陈述的需求。用文档记载需求背后的原因将在每天进行实现决策时给你的团队带来无价的信息。
      + 在项目启动之前把这些关键问题解决好，你就能更好地避免“分析瘫痪”（analysis paralysis）, 并实际开始你的成功项目。
      + 完美，不是在没有什么需要增加、而是在没有什么需要去掉时达到的。
      + 成功的工具会适应使用他们的双手。
      + 真正的用例是具有层次结构和交叉链接的文字描述。
      + 需求不是架构。需求不是设计，也不是用户界面。需求是需要。
      + 在面对棘手的问题时，列出所有你面前的可能途径。不要排除任何东西，不管它听起来有多无用活愚蠢。列出检查列表中的每一项，并解释为何不能采用某个特定的途径。
      + 先确定最为严格的约束。然后再考虑其余的约束。
      + 编写程序规范就是把需求归约到程序员能够接管的程度的过程。这是一个交流活动，旨在解释并澄清系统的需求，比如消除主要的歧义。除了与最初实现的开发者交谈以外，规范还是留给未来进行代码维护和增强的几批程序员的记录。规范也是与用户的约定。
      + 倾向于把需求、设计、以及实现视为同一个过程--交付高质量的系统--的不同方面。要设法采用无缝的方法：规范和实现不过是同一个过程--设法捕捉和编撰需求--的不同方面。
      + 把技术和方法放进开发实践和能力的语境中。
      + 批判地看待方法学，并从各种方法学中提取精华，融合成每个月都在变得更好的一套工作习惯。不断努力提炼和改善你的开发过程。绝不要把方法学的呆板限制当做你的世界的边界。
      + tips:
        - Crash Early.(早崩溃。)
        - Don't Be a Slave to Formal Method.
        - Expensive Tools Do Not Produce Better Designs.
        - Organize Around Functionality, Not Job Functions.
        - Care About Your Craft.(关注你的技艺。)
        - Don't Assume it - Prove It.(不要假定，要证明。)
        - Learn a Text Manipulation Language.(学习一种文本操纵语言。)
        - Think!About Your Work.(思考！你的工作。)
        - Provide Options, Don't Make Lame Excuses.(提供各种选择，不要找蹩脚的借口。)
        - Don't Live with Broken Windows.(不要容忍破窗户)
        - Be a Catalyst for Change. (做变化的催化剂)
        - Remember the Big Picture.(记住大的图景)
        - Invest Regularly in Your Knowledge Portfolio.(定期为你的知识资产投资)
        - Critically Analyze What You Read and Hear.(批判地分析你读到的和听到的)
        - DRY - Don't Repeat Yourself.(不要重复你自己)
        - Make It Easy to Reuse.(让复用变得容易)
        - Eliminate Effects Between Unrelated Things.(消除无关事物之间的影响)
        - Write Code That Writes Code.(编写能编写代码的代码。)
        - You Can't Write Perfect Software.(你不可能写出完美的软件。)
        - If It Can't Happen, Use Assertions to Ensure That it Won't. (如果它不可能发生, 用断言确保它不会发生。)
        - Finish What You Start.
        - Don't Program by Coincidence.
        - Use Blackboards to Coordinate Workflow.
        - Separate Views from Models.
        - Design Using Services.
        - Analyze Workflow to Improve Concurrency.
        - Put Abstractions in Code, Details in Metadata. (将抽象放进代码， 细节放进元数据。)
        - Configure, Don't Integrate.(要配置，不要集成。)
        - Estimate the Order Your Algorithms.(估算你的算法的阶。)
        - Test Your Estimates.
        - Design to Test.
        - Test Your Software, or Your Users Will.
        - Don't Use Wizard Code You Don't Understand.
        - Refactor Early, Refactor Often.(早重构，常重构。)
        - Work with a User to Think Like a User.(与用户一起工作，像用户一样思考)
        - Abstractions Live Longer than Details.(抽象比细节活得更长久。)
        - Use a Project Glossary.
        - Don't Think Outside the Box-Find the Box.
        - Listen to Nagging Doubts-Start When You're Ready.
        - Some Things Are Better Done than Described.

*** TODO 29.《图解茶经》(2017-02-26)
**** [[../photos/tea.jpg]]
**** 饼茶品质好坏的鉴别
     + 饼茶外表：茶饼出膏，　外表光滑。
     + 含膏的表现：　外形褶皱，滋味浓。
     + 饼茶颜色差别：　黑色茶饼，隔夜制作（汁多）。
     + 蒸压程度：饼面凹凸，粗松。
**** 中国十大名茶
*****  西湖龙井
***** 洞庭碧螺春
***** 黄山毛峰
***** 君山银针
***** 武夷大红袍
***** 安溪铁观音
***** 祁门红茶
***** 庐山云雾茶
***** 信阳毛尖
***** 六安瓜片
